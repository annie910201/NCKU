Rules useless in parser due to conflicts

   33 DeclarationStmt: LET ID ':' Type


State 39 conflicts: 2 shift/reduce
State 67 conflicts: 2 shift/reduce
State 68 conflicts: 2 shift/reduce
State 86 conflicts: 2 shift/reduce
State 170 conflicts: 2 shift/reduce
State 183 conflicts: 1 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: GlobalStatementList

    2 GlobalStatementList: GlobalStatementList GlobalStatement
    3                    | GlobalStatement

    4 GlobalStatement: FunctionDeclStmt
    5                | NEWLINE

    6 $@1: %empty

    7 $@2: %empty

    8 FunctionDeclStmt: FuncOpen '(' $@1 ParameterList ')' ARROW Type $@2 FuncBlock

    9 $@3: %empty

   10 FunctionDeclStmt: FuncOpen '(' ')' $@3 FuncBlock

   11 FuncOpen: FUNC ID

   12 ParameterList: ParameterList ',' ID ':' Type
   13              | ID ':' Type

   14 FuncBlock: '{' NEWLINE StatementList '}'

   15 StatementList: Statement
   16              | Statement StatementList

   17 Statement: Block NEWLINE
   18          | DeclarationStmt ';' NEWLINE
   19          | ExpressionStmt
   20          | AssignmentStmt ';' NEWLINE
   21          | IFStmt
   22          | PrintStmt ';' NEWLINE
   23          | WhileStmt NEWLINE
   24          | ForStmt NEWLINE
   25          | CallFunction NEWLINE
   26          | NEWLINE

   27 CallFunction: ID '(' ')' ';'

   28 Block: StartBlock RETURN Literal ';' NEWLINE '}'
   29      | StartBlock StatementList '}'
   30      | StartBlock BREAK Literal ';' NEWLINE '}'

   31 $@4: %empty

   32 StartBlock: '{' $@4 NEWLINE

   33 DeclarationStmt: LET ID ':' Type
   34                | LET MUT ID ':' Type
   35                | LET ID ':' Type '=' StatementList
   36                | LET MUT ID ':' Type '=' ExpressionStmt

   37 $@5: %empty

   38 DeclarationStmt: LET ID ':' DeclareArrayStmt $@5 '=' ExpressionStmt
   39                | LET MUT ID '=' ExpressionStmt
   40                | LET ID '=' Literal
   41                | LET ID ':' Type '=' LoopStmt

   42 DeclareArrayStmt: '[' DeclareArrayStmt ']'
   43                 | Type ';' Literal

   44 ArrayExpr: Literal ',' ArrayExpr
   45          | '[' Literal ',' ArrayExpr
   46          | Literal ']'

   47 $@6: %empty

   48 ArrayExpr: '&' ID $@6 '[' DotExpr ']'

   49 $@7: %empty

   50 $@8: %empty

   51 AssignmentStmt: ExpressionStmt $@7 assign_op $@8 ExpressionStmt

   52 IFStmt: IFOpen NEWLINE

   53 $@9: %empty

   54 IFStmt: IFOpen NEWLINE ELSE $@9 Block

   55 $@10: %empty

   56 IFStmt: IFOpen ELSE $@10 Block

   57 $@11: %empty

   58 IFOpen: IF $@11 ExpressionStmt Block

   59 PrintStmt: PRINT '(' NEWLINE ExpressionStmt NEWLINE ')'
   60          | PRINT '(' ExpressionStmt ')'
   61          | PRINTLN '(' ExpressionStmt ')'

   62 $@12: %empty

   63 $@13: %empty

   64 WhileStmt: WHILE $@12 ExpressionStmt $@13 Block

   65 $@14: %empty

   66 $@15: %empty

   67 ForStmt: FOR $@14 ID IN ID $@15 StartBlock StatementList '}'

   68 $@16: %empty

   69 LoopStmt: LOOP $@16 Block

   70 ExpressionStmt: LogicalORExpr

   71 LogicalORExpr: LogicalANDExpr LOR LogicalANDExpr
   72              | LogicalANDExpr

   73 LogicalANDExpr: ComparisonExpr LAND ComparisonExpr
   74               | ComparisonExpr

   75 ComparisonExpr: AdditionExpr cmp_op AdditionExpr
   76               | AdditionExpr

   77 AdditionExpr: MultiplicationExpr add_op MultiplicationExpr
   78             | AdditionExpr add_op MultiplicationExpr
   79             | MultiplicationExpr

   80 MultiplicationExpr: UnaryExpr mul_op UnaryExpr
   81                   | UnaryExpr shift_op UnaryExpr
   82                   | UnaryExpr

   83 UnaryExpr: unary_op UnaryExpr
   84          | ArrayExpr
   85          | Operand

   86 $@17: %empty

   87 DotExpr: DOTDOT $@17 Literal
   88        | DOtOpen

   89 $@18: %empty

   90 DotExpr: DOtOpen $@18 Literal

   91 DOtOpen: Literal DOTDOT

   92 Operand: Literal

   93 $@19: %empty

   94 Operand: Literal AS $@19 Type
   95        | ID
   96        | '(' ExpressionStmt ')'
   97        | ID '[' INT_LIT ']'

   98 $@20: %empty

   99 Operand: ID AS $@20 Type
  100        | ID '(' ID ',' ID ')'

  101 Literal: INT_LIT
  102        | FLOAT_LIT
  103        | '"' STRING_LIT '"'
  104        | '"' '"'
  105        | TRUE
  106        | FALSE

  107 assign_op: '='
  108          | ADD_ASSIGN
  109          | SUB_ASSIGN
  110          | MUL_ASSIGN
  111          | DIV_ASSIGN
  112          | REM_ASSIGN

  113 cmp_op: EQL
  114       | NEQ
  115       | '<'
  116       | LEQ
  117       | '>'
  118       | GEQ

  119 add_op: '+'
  120       | '-'

  121 mul_op: '*'
  122       | '/'
  123       | '%'

  124 shift_op: LSHIFT
  125         | RSHIFT

  126 unary_op: '+'
  127         | '-'
  128         | '!'

  129 Type: INT
  130     | FLOAT
  131     | '&' STR
  132     | BOOL


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 128
    '"' (34) 103 104
    '%' (37) 123
    '&' (38) 48 131
    '(' (40) 8 10 27 59 60 61 96 100
    ')' (41) 8 10 27 59 60 61 96 100
    '*' (42) 121
    '+' (43) 119 126
    ',' (44) 12 44 45 100
    '-' (45) 120 127
    '/' (47) 122
    ':' (58) 12 13 33 34 35 36 38 41
    ';' (59) 18 20 22 27 28 30 43
    '<' (60) 115
    '=' (61) 35 36 38 39 40 41 107
    '>' (62) 117
    '[' (91) 42 45 48 97
    ']' (93) 42 46 48 97
    '{' (123) 14 32
    '}' (125) 14 28 29 30 67
    error (256)
    LET (258) 33 34 35 36 38 39 40 41
    MUT (259) 34 36 39
    NEWLINE (260) 5 14 17 18 20 22 23 24 25 26 28 30 32 52 54 59
    INT (261) 129
    FLOAT (262) 130
    BOOL (263) 132
    STR (264) 131
    TRUE (265) 105
    FALSE (266) 106
    GEQ (267) 118
    LEQ (268) 116
    EQL (269) 113
    NEQ (270) 114
    LOR (271) 71
    LAND (272) 73
    ADD_ASSIGN (273) 108
    SUB_ASSIGN (274) 109
    MUL_ASSIGN (275) 110
    DIV_ASSIGN (276) 111
    REM_ASSIGN (277) 112
    IF (278) 58
    ELSE (279) 54 56
    FOR (280) 67
    WHILE (281) 64
    LOOP (282) 69
    PRINT (283) 59 60
    PRINTLN (284) 61
    FUNC (285) 11
    RETURN (286) 28
    BREAK (287) 30
    ID (288) 11 12 13 27 33 34 35 36 38 39 40 41 48 67 95 97 99 100
    ARROW (289) 8
    AS (290) 94 99
    IN (291) 67
    DOTDOT (292) 87 91
    RSHIFT (293) 125
    LSHIFT (294) 124
    INT_LIT <i_val> (295) 97 101
    FLOAT_LIT <f_val> (296) 102
    STRING_LIT <s_val> (297) 103


Nonterminals, with rules where they appear

    $accept (63)
        on left: 0
    Program (64)
        on left: 1
        on right: 0
    GlobalStatementList (65)
        on left: 2 3
        on right: 1 2
    GlobalStatement (66)
        on left: 4 5
        on right: 2 3
    FunctionDeclStmt (67)
        on left: 8 10
        on right: 4
    $@1 (68)
        on left: 6
        on right: 8
    $@2 (69)
        on left: 7
        on right: 8
    $@3 (70)
        on left: 9
        on right: 10
    FuncOpen <s_val> (71)
        on left: 11
        on right: 8 10
    ParameterList (72)
        on left: 12 13
        on right: 8 12
    FuncBlock (73)
        on left: 14
        on right: 8 10
    StatementList (74)
        on left: 15 16
        on right: 14 16 29 35 67
    Statement (75)
        on left: 17 18 19 20 21 22 23 24 25 26
        on right: 15 16
    CallFunction (76)
        on left: 27
        on right: 25
    Block (77)
        on left: 28 29 30
        on right: 17 54 56 58 64 69
    StartBlock (78)
        on left: 32
        on right: 28 29 30 67
    $@4 (79)
        on left: 31
        on right: 32
    DeclarationStmt (80)
        on left: 33 34 35 36 38 39 40 41
        on right: 18
    $@5 (81)
        on left: 37
        on right: 38
    DeclareArrayStmt (82)
        on left: 42 43
        on right: 38 42
    ArrayExpr (83)
        on left: 44 45 46 48
        on right: 44 45 84
    $@6 (84)
        on left: 47
        on right: 48
    AssignmentStmt (85)
        on left: 51
        on right: 20
    $@7 (86)
        on left: 49
        on right: 51
    $@8 (87)
        on left: 50
        on right: 51
    IFStmt (88)
        on left: 52 54 56
        on right: 21
    $@9 (89)
        on left: 53
        on right: 54
    $@10 (90)
        on left: 55
        on right: 56
    IFOpen (91)
        on left: 58
        on right: 52 54 56
    $@11 (92)
        on left: 57
        on right: 58
    PrintStmt (93)
        on left: 59 60 61
        on right: 22
    WhileStmt (94)
        on left: 64
        on right: 23
    $@12 (95)
        on left: 62
        on right: 64
    $@13 (96)
        on left: 63
        on right: 64
    ForStmt (97)
        on left: 67
        on right: 24
    $@14 (98)
        on left: 65
        on right: 67
    $@15 (99)
        on left: 66
        on right: 67
    LoopStmt (100)
        on left: 69
        on right: 41
    $@16 (101)
        on left: 68
        on right: 69
    ExpressionStmt <s_val> (102)
        on left: 70
        on right: 19 36 38 39 51 58 59 60 61 64 96
    LogicalORExpr <s_val> (103)
        on left: 71 72
        on right: 70
    LogicalANDExpr <s_val> (104)
        on left: 73 74
        on right: 71 72
    ComparisonExpr <s_val> (105)
        on left: 75 76
        on right: 73 74
    AdditionExpr <s_val> (106)
        on left: 77 78 79
        on right: 75 76 78
    MultiplicationExpr <s_val> (107)
        on left: 80 81 82
        on right: 77 78 79
    UnaryExpr <s_val> (108)
        on left: 83 84 85
        on right: 80 81 82 83
    DotExpr (109)
        on left: 87 88 90
        on right: 48
    $@17 (110)
        on left: 86
        on right: 87
    $@18 (111)
        on left: 89
        on right: 90
    DOtOpen (112)
        on left: 91
        on right: 88 90
    Operand <s_val> (113)
        on left: 92 94 95 96 97 99 100
        on right: 85
    $@19 (114)
        on left: 93
        on right: 94
    $@20 (115)
        on left: 98
        on right: 99
    Literal <s_val> (116)
        on left: 101 102 103 104 105 106
        on right: 28 30 40 43 44 45 46 87 90 91 92 94
    assign_op <s_val> (117)
        on left: 107 108 109 110 111 112
        on right: 51
    cmp_op <s_val> (118)
        on left: 113 114 115 116 117 118
        on right: 75
    add_op <s_val> (119)
        on left: 119 120
        on right: 77 78
    mul_op <s_val> (120)
        on left: 121 122 123
        on right: 80
    shift_op <s_val> (121)
        on left: 124 125
        on right: 81
    unary_op <s_val> (122)
        on left: 126 127 128
        on right: 83
    Type <s_val> (123)
        on left: 129 130 131 132
        on right: 8 12 13 33 34 35 36 41 43 94 99


State 0

    0 $accept: . Program $end

    NEWLINE  shift, and go to state 1
    FUNC     shift, and go to state 2

    Program              go to state 3
    GlobalStatementList  go to state 4
    GlobalStatement      go to state 5
    FunctionDeclStmt     go to state 6
    FuncOpen             go to state 7


State 1

    5 GlobalStatement: NEWLINE .

    $default  reduce using rule 5 (GlobalStatement)


State 2

   11 FuncOpen: FUNC . ID

    ID  shift, and go to state 8


State 3

    0 $accept: Program . $end

    $end  shift, and go to state 9


State 4

    1 Program: GlobalStatementList .
    2 GlobalStatementList: GlobalStatementList . GlobalStatement

    NEWLINE  shift, and go to state 1
    FUNC     shift, and go to state 2

    $default  reduce using rule 1 (Program)

    GlobalStatement   go to state 10
    FunctionDeclStmt  go to state 6
    FuncOpen          go to state 7


State 5

    3 GlobalStatementList: GlobalStatement .

    $default  reduce using rule 3 (GlobalStatementList)


State 6

    4 GlobalStatement: FunctionDeclStmt .

    $default  reduce using rule 4 (GlobalStatement)


State 7

    8 FunctionDeclStmt: FuncOpen . '(' $@1 ParameterList ')' ARROW Type $@2 FuncBlock
   10                 | FuncOpen . '(' ')' $@3 FuncBlock

    '('  shift, and go to state 11


State 8

   11 FuncOpen: FUNC ID .

    $default  reduce using rule 11 (FuncOpen)


State 9

    0 $accept: Program $end .

    $default  accept


State 10

    2 GlobalStatementList: GlobalStatementList GlobalStatement .

    $default  reduce using rule 2 (GlobalStatementList)


State 11

    8 FunctionDeclStmt: FuncOpen '(' . $@1 ParameterList ')' ARROW Type $@2 FuncBlock
   10                 | FuncOpen '(' . ')' $@3 FuncBlock

    ')'  shift, and go to state 12

    $default  reduce using rule 6 ($@1)

    $@1  go to state 13


State 12

   10 FunctionDeclStmt: FuncOpen '(' ')' . $@3 FuncBlock

    $default  reduce using rule 9 ($@3)

    $@3  go to state 14


State 13

    8 FunctionDeclStmt: FuncOpen '(' $@1 . ParameterList ')' ARROW Type $@2 FuncBlock

    ID  shift, and go to state 15

    ParameterList  go to state 16


State 14

   10 FunctionDeclStmt: FuncOpen '(' ')' $@3 . FuncBlock

    '{'  shift, and go to state 17

    FuncBlock  go to state 18


State 15

   13 ParameterList: ID . ':' Type

    ':'  shift, and go to state 19


State 16

    8 FunctionDeclStmt: FuncOpen '(' $@1 ParameterList . ')' ARROW Type $@2 FuncBlock
   12 ParameterList: ParameterList . ',' ID ':' Type

    ')'  shift, and go to state 20
    ','  shift, and go to state 21


State 17

   14 FuncBlock: '{' . NEWLINE StatementList '}'

    NEWLINE  shift, and go to state 22


State 18

   10 FunctionDeclStmt: FuncOpen '(' ')' $@3 FuncBlock .

    $default  reduce using rule 10 (FunctionDeclStmt)


State 19

   13 ParameterList: ID ':' . Type

    INT    shift, and go to state 23
    FLOAT  shift, and go to state 24
    BOOL   shift, and go to state 25
    '&'    shift, and go to state 26

    Type  go to state 27


State 20

    8 FunctionDeclStmt: FuncOpen '(' $@1 ParameterList ')' . ARROW Type $@2 FuncBlock

    ARROW  shift, and go to state 28


State 21

   12 ParameterList: ParameterList ',' . ID ':' Type

    ID  shift, and go to state 29


State 22

   14 FuncBlock: '{' NEWLINE . StatementList '}'

    LET        shift, and go to state 30
    NEWLINE    shift, and go to state 31
    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    IF         shift, and go to state 34
    FOR        shift, and go to state 35
    WHILE      shift, and go to state 36
    PRINT      shift, and go to state 37
    PRINTLN    shift, and go to state 38
    ID         shift, and go to state 39
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '{'        shift, and go to state 43
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    StatementList       go to state 50
    Statement           go to state 51
    CallFunction        go to state 52
    Block               go to state 53
    StartBlock          go to state 54
    DeclarationStmt     go to state 55
    ArrayExpr           go to state 56
    AssignmentStmt      go to state 57
    IFStmt              go to state 58
    IFOpen              go to state 59
    PrintStmt           go to state 60
    WhileStmt           go to state 61
    ForStmt             go to state 62
    ExpressionStmt      go to state 63
    LogicalORExpr       go to state 64
    LogicalANDExpr      go to state 65
    ComparisonExpr      go to state 66
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 23

  129 Type: INT .

    $default  reduce using rule 129 (Type)


State 24

  130 Type: FLOAT .

    $default  reduce using rule 130 (Type)


State 25

  132 Type: BOOL .

    $default  reduce using rule 132 (Type)


State 26

  131 Type: '&' . STR

    STR  shift, and go to state 73


State 27

   13 ParameterList: ID ':' Type .

    $default  reduce using rule 13 (ParameterList)


State 28

    8 FunctionDeclStmt: FuncOpen '(' $@1 ParameterList ')' ARROW . Type $@2 FuncBlock

    INT    shift, and go to state 23
    FLOAT  shift, and go to state 24
    BOOL   shift, and go to state 25
    '&'    shift, and go to state 26

    Type  go to state 74


State 29

   12 ParameterList: ParameterList ',' ID . ':' Type

    ':'  shift, and go to state 75


State 30

   33 DeclarationStmt: LET . ID ':' Type
   34                | LET . MUT ID ':' Type
   35                | LET . ID ':' Type '=' StatementList
   36                | LET . MUT ID ':' Type '=' ExpressionStmt
   38                | LET . ID ':' DeclareArrayStmt $@5 '=' ExpressionStmt
   39                | LET . MUT ID '=' ExpressionStmt
   40                | LET . ID '=' Literal
   41                | LET . ID ':' Type '=' LoopStmt

    MUT  shift, and go to state 76
    ID   shift, and go to state 77


State 31

   26 Statement: NEWLINE .

    $default  reduce using rule 26 (Statement)


State 32

  105 Literal: TRUE .

    $default  reduce using rule 105 (Literal)


State 33

  106 Literal: FALSE .

    $default  reduce using rule 106 (Literal)


State 34

   58 IFOpen: IF . $@11 ExpressionStmt Block

    $default  reduce using rule 57 ($@11)

    $@11  go to state 78


State 35

   67 ForStmt: FOR . $@14 ID IN ID $@15 StartBlock StatementList '}'

    $default  reduce using rule 65 ($@14)

    $@14  go to state 79


State 36

   64 WhileStmt: WHILE . $@12 ExpressionStmt $@13 Block

    $default  reduce using rule 62 ($@12)

    $@12  go to state 80


State 37

   59 PrintStmt: PRINT . '(' NEWLINE ExpressionStmt NEWLINE ')'
   60          | PRINT . '(' ExpressionStmt ')'

    '('  shift, and go to state 81


State 38

   61 PrintStmt: PRINTLN . '(' ExpressionStmt ')'

    '('  shift, and go to state 82


State 39

   27 CallFunction: ID . '(' ')' ';'
   95 Operand: ID .
   97        | ID . '[' INT_LIT ']'
   99        | ID . AS $@20 Type
  100        | ID . '(' ID ',' ID ')'

    AS   shift, and go to state 83
    '('  shift, and go to state 84
    '['  shift, and go to state 85

    '('       [reduce using rule 95 (Operand)]
    '['       [reduce using rule 95 (Operand)]
    $default  reduce using rule 95 (Operand)


State 40

  101 Literal: INT_LIT .

    $default  reduce using rule 101 (Literal)


State 41

  102 Literal: FLOAT_LIT .

    $default  reduce using rule 102 (Literal)


State 42

   96 Operand: '(' . ExpressionStmt ')'

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr           go to state 56
    ExpressionStmt      go to state 87
    LogicalORExpr       go to state 64
    LogicalANDExpr      go to state 65
    ComparisonExpr      go to state 66
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 43

   32 StartBlock: '{' . $@4 NEWLINE

    $default  reduce using rule 31 ($@4)

    $@4  go to state 88


State 44

   45 ArrayExpr: '[' . Literal ',' ArrayExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '"'        shift, and go to state 46

    Literal  go to state 89


State 45

   48 ArrayExpr: '&' . ID $@6 '[' DotExpr ']'

    ID  shift, and go to state 90


State 46

  103 Literal: '"' . STRING_LIT '"'
  104        | '"' . '"'

    STRING_LIT  shift, and go to state 91
    '"'         shift, and go to state 92


State 47

  126 unary_op: '+' .

    $default  reduce using rule 126 (unary_op)


State 48

  127 unary_op: '-' .

    $default  reduce using rule 127 (unary_op)


State 49

  128 unary_op: '!' .

    $default  reduce using rule 128 (unary_op)


State 50

   14 FuncBlock: '{' NEWLINE StatementList . '}'

    '}'  shift, and go to state 93


State 51

   15 StatementList: Statement .
   16              | Statement . StatementList

    LET        shift, and go to state 30
    NEWLINE    shift, and go to state 31
    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    IF         shift, and go to state 34
    FOR        shift, and go to state 35
    WHILE      shift, and go to state 36
    PRINT      shift, and go to state 37
    PRINTLN    shift, and go to state 38
    ID         shift, and go to state 39
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '{'        shift, and go to state 43
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    $default  reduce using rule 15 (StatementList)

    StatementList       go to state 94
    Statement           go to state 51
    CallFunction        go to state 52
    Block               go to state 53
    StartBlock          go to state 54
    DeclarationStmt     go to state 55
    ArrayExpr           go to state 56
    AssignmentStmt      go to state 57
    IFStmt              go to state 58
    IFOpen              go to state 59
    PrintStmt           go to state 60
    WhileStmt           go to state 61
    ForStmt             go to state 62
    ExpressionStmt      go to state 63
    LogicalORExpr       go to state 64
    LogicalANDExpr      go to state 65
    ComparisonExpr      go to state 66
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 52

   25 Statement: CallFunction . NEWLINE

    NEWLINE  shift, and go to state 95


State 53

   17 Statement: Block . NEWLINE

    NEWLINE  shift, and go to state 96


State 54

   28 Block: StartBlock . RETURN Literal ';' NEWLINE '}'
   29      | StartBlock . StatementList '}'
   30      | StartBlock . BREAK Literal ';' NEWLINE '}'

    LET        shift, and go to state 30
    NEWLINE    shift, and go to state 31
    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    IF         shift, and go to state 34
    FOR        shift, and go to state 35
    WHILE      shift, and go to state 36
    PRINT      shift, and go to state 37
    PRINTLN    shift, and go to state 38
    RETURN     shift, and go to state 97
    BREAK      shift, and go to state 98
    ID         shift, and go to state 39
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '{'        shift, and go to state 43
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    StatementList       go to state 99
    Statement           go to state 51
    CallFunction        go to state 52
    Block               go to state 53
    StartBlock          go to state 54
    DeclarationStmt     go to state 55
    ArrayExpr           go to state 56
    AssignmentStmt      go to state 57
    IFStmt              go to state 58
    IFOpen              go to state 59
    PrintStmt           go to state 60
    WhileStmt           go to state 61
    ForStmt             go to state 62
    ExpressionStmt      go to state 63
    LogicalORExpr       go to state 64
    LogicalANDExpr      go to state 65
    ComparisonExpr      go to state 66
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 55

   18 Statement: DeclarationStmt . ';' NEWLINE

    ';'  shift, and go to state 100


State 56

   84 UnaryExpr: ArrayExpr .

    $default  reduce using rule 84 (UnaryExpr)


State 57

   20 Statement: AssignmentStmt . ';' NEWLINE

    ';'  shift, and go to state 101


State 58

   21 Statement: IFStmt .

    $default  reduce using rule 21 (Statement)


State 59

   52 IFStmt: IFOpen . NEWLINE
   54       | IFOpen . NEWLINE ELSE $@9 Block
   56       | IFOpen . ELSE $@10 Block

    NEWLINE  shift, and go to state 102
    ELSE     shift, and go to state 103


State 60

   22 Statement: PrintStmt . ';' NEWLINE

    ';'  shift, and go to state 104


State 61

   23 Statement: WhileStmt . NEWLINE

    NEWLINE  shift, and go to state 105


State 62

   24 Statement: ForStmt . NEWLINE

    NEWLINE  shift, and go to state 106


State 63

   19 Statement: ExpressionStmt .
   51 AssignmentStmt: ExpressionStmt . $@7 assign_op $@8 ExpressionStmt

    ADD_ASSIGN  reduce using rule 49 ($@7)
    SUB_ASSIGN  reduce using rule 49 ($@7)
    MUL_ASSIGN  reduce using rule 49 ($@7)
    DIV_ASSIGN  reduce using rule 49 ($@7)
    REM_ASSIGN  reduce using rule 49 ($@7)
    '='         reduce using rule 49 ($@7)
    $default    reduce using rule 19 (Statement)

    $@7  go to state 107


State 64

   70 ExpressionStmt: LogicalORExpr .

    $default  reduce using rule 70 (ExpressionStmt)


State 65

   71 LogicalORExpr: LogicalANDExpr . LOR LogicalANDExpr
   72              | LogicalANDExpr .

    LOR  shift, and go to state 108

    $default  reduce using rule 72 (LogicalORExpr)


State 66

   73 LogicalANDExpr: ComparisonExpr . LAND ComparisonExpr
   74               | ComparisonExpr .

    LAND  shift, and go to state 109

    $default  reduce using rule 74 (LogicalANDExpr)


State 67

   75 ComparisonExpr: AdditionExpr . cmp_op AdditionExpr
   76               | AdditionExpr .
   78 AdditionExpr: AdditionExpr . add_op MultiplicationExpr

    GEQ  shift, and go to state 110
    LEQ  shift, and go to state 111
    EQL  shift, and go to state 112
    NEQ  shift, and go to state 113
    '<'  shift, and go to state 114
    '>'  shift, and go to state 115
    '+'  shift, and go to state 116
    '-'  shift, and go to state 117

    '+'       [reduce using rule 76 (ComparisonExpr)]
    '-'       [reduce using rule 76 (ComparisonExpr)]
    $default  reduce using rule 76 (ComparisonExpr)

    cmp_op  go to state 118
    add_op  go to state 119


State 68

   77 AdditionExpr: MultiplicationExpr . add_op MultiplicationExpr
   79             | MultiplicationExpr .

    '+'  shift, and go to state 116
    '-'  shift, and go to state 117

    '+'       [reduce using rule 79 (AdditionExpr)]
    '-'       [reduce using rule 79 (AdditionExpr)]
    $default  reduce using rule 79 (AdditionExpr)

    add_op  go to state 120


State 69

   80 MultiplicationExpr: UnaryExpr . mul_op UnaryExpr
   81                   | UnaryExpr . shift_op UnaryExpr
   82                   | UnaryExpr .

    RSHIFT  shift, and go to state 121
    LSHIFT  shift, and go to state 122
    '*'     shift, and go to state 123
    '/'     shift, and go to state 124
    '%'     shift, and go to state 125

    $default  reduce using rule 82 (MultiplicationExpr)

    mul_op    go to state 126
    shift_op  go to state 127


State 70

   85 UnaryExpr: Operand .

    $default  reduce using rule 85 (UnaryExpr)


State 71

   44 ArrayExpr: Literal . ',' ArrayExpr
   46          | Literal . ']'
   92 Operand: Literal .
   94        | Literal . AS $@19 Type

    AS   shift, and go to state 128
    ','  shift, and go to state 129
    ']'  shift, and go to state 130

    $default  reduce using rule 92 (Operand)


State 72

   83 UnaryExpr: unary_op . UnaryExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr  go to state 56
    UnaryExpr  go to state 131
    Operand    go to state 70
    Literal    go to state 71
    unary_op   go to state 72


State 73

  131 Type: '&' STR .

    $default  reduce using rule 131 (Type)


State 74

    8 FunctionDeclStmt: FuncOpen '(' $@1 ParameterList ')' ARROW Type . $@2 FuncBlock

    $default  reduce using rule 7 ($@2)

    $@2  go to state 132


State 75

   12 ParameterList: ParameterList ',' ID ':' . Type

    INT    shift, and go to state 23
    FLOAT  shift, and go to state 24
    BOOL   shift, and go to state 25
    '&'    shift, and go to state 26

    Type  go to state 133


State 76

   34 DeclarationStmt: LET MUT . ID ':' Type
   36                | LET MUT . ID ':' Type '=' ExpressionStmt
   39                | LET MUT . ID '=' ExpressionStmt

    ID  shift, and go to state 134


State 77

   33 DeclarationStmt: LET ID . ':' Type
   35                | LET ID . ':' Type '=' StatementList
   38                | LET ID . ':' DeclareArrayStmt $@5 '=' ExpressionStmt
   40                | LET ID . '=' Literal
   41                | LET ID . ':' Type '=' LoopStmt

    ':'  shift, and go to state 135
    '='  shift, and go to state 136


State 78

   58 IFOpen: IF $@11 . ExpressionStmt Block

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr           go to state 56
    ExpressionStmt      go to state 137
    LogicalORExpr       go to state 64
    LogicalANDExpr      go to state 65
    ComparisonExpr      go to state 66
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 79

   67 ForStmt: FOR $@14 . ID IN ID $@15 StartBlock StatementList '}'

    ID  shift, and go to state 138


State 80

   64 WhileStmt: WHILE $@12 . ExpressionStmt $@13 Block

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr           go to state 56
    ExpressionStmt      go to state 139
    LogicalORExpr       go to state 64
    LogicalANDExpr      go to state 65
    ComparisonExpr      go to state 66
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 81

   59 PrintStmt: PRINT '(' . NEWLINE ExpressionStmt NEWLINE ')'
   60          | PRINT '(' . ExpressionStmt ')'

    NEWLINE    shift, and go to state 140
    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr           go to state 56
    ExpressionStmt      go to state 141
    LogicalORExpr       go to state 64
    LogicalANDExpr      go to state 65
    ComparisonExpr      go to state 66
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 82

   61 PrintStmt: PRINTLN '(' . ExpressionStmt ')'

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr           go to state 56
    ExpressionStmt      go to state 142
    LogicalORExpr       go to state 64
    LogicalANDExpr      go to state 65
    ComparisonExpr      go to state 66
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 83

   99 Operand: ID AS . $@20 Type

    $default  reduce using rule 98 ($@20)

    $@20  go to state 143


State 84

   27 CallFunction: ID '(' . ')' ';'
  100 Operand: ID '(' . ID ',' ID ')'

    ID   shift, and go to state 144
    ')'  shift, and go to state 145


State 85

   97 Operand: ID '[' . INT_LIT ']'

    INT_LIT  shift, and go to state 146


State 86

   95 Operand: ID .
   97        | ID . '[' INT_LIT ']'
   99        | ID . AS $@20 Type
  100        | ID . '(' ID ',' ID ')'

    AS   shift, and go to state 83
    '('  shift, and go to state 147
    '['  shift, and go to state 85

    '('       [reduce using rule 95 (Operand)]
    '['       [reduce using rule 95 (Operand)]
    $default  reduce using rule 95 (Operand)


State 87

   96 Operand: '(' ExpressionStmt . ')'

    ')'  shift, and go to state 148


State 88

   32 StartBlock: '{' $@4 . NEWLINE

    NEWLINE  shift, and go to state 149


State 89

   45 ArrayExpr: '[' Literal . ',' ArrayExpr

    ','  shift, and go to state 150


State 90

   48 ArrayExpr: '&' ID . $@6 '[' DotExpr ']'

    $default  reduce using rule 47 ($@6)

    $@6  go to state 151


State 91

  103 Literal: '"' STRING_LIT . '"'

    '"'  shift, and go to state 152


State 92

  104 Literal: '"' '"' .

    $default  reduce using rule 104 (Literal)


State 93

   14 FuncBlock: '{' NEWLINE StatementList '}' .

    $default  reduce using rule 14 (FuncBlock)


State 94

   16 StatementList: Statement StatementList .

    $default  reduce using rule 16 (StatementList)


State 95

   25 Statement: CallFunction NEWLINE .

    $default  reduce using rule 25 (Statement)


State 96

   17 Statement: Block NEWLINE .

    $default  reduce using rule 17 (Statement)


State 97

   28 Block: StartBlock RETURN . Literal ';' NEWLINE '}'

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '"'        shift, and go to state 46

    Literal  go to state 153


State 98

   30 Block: StartBlock BREAK . Literal ';' NEWLINE '}'

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '"'        shift, and go to state 46

    Literal  go to state 154


State 99

   29 Block: StartBlock StatementList . '}'

    '}'  shift, and go to state 155


State 100

   18 Statement: DeclarationStmt ';' . NEWLINE

    NEWLINE  shift, and go to state 156


State 101

   20 Statement: AssignmentStmt ';' . NEWLINE

    NEWLINE  shift, and go to state 157


State 102

   52 IFStmt: IFOpen NEWLINE .
   54       | IFOpen NEWLINE . ELSE $@9 Block

    ELSE  shift, and go to state 158

    $default  reduce using rule 52 (IFStmt)


State 103

   56 IFStmt: IFOpen ELSE . $@10 Block

    $default  reduce using rule 55 ($@10)

    $@10  go to state 159


State 104

   22 Statement: PrintStmt ';' . NEWLINE

    NEWLINE  shift, and go to state 160


State 105

   23 Statement: WhileStmt NEWLINE .

    $default  reduce using rule 23 (Statement)


State 106

   24 Statement: ForStmt NEWLINE .

    $default  reduce using rule 24 (Statement)


State 107

   51 AssignmentStmt: ExpressionStmt $@7 . assign_op $@8 ExpressionStmt

    ADD_ASSIGN  shift, and go to state 161
    SUB_ASSIGN  shift, and go to state 162
    MUL_ASSIGN  shift, and go to state 163
    DIV_ASSIGN  shift, and go to state 164
    REM_ASSIGN  shift, and go to state 165
    '='         shift, and go to state 166

    assign_op  go to state 167


State 108

   71 LogicalORExpr: LogicalANDExpr LOR . LogicalANDExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr           go to state 56
    LogicalANDExpr      go to state 168
    ComparisonExpr      go to state 66
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 109

   73 LogicalANDExpr: ComparisonExpr LAND . ComparisonExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr           go to state 56
    ComparisonExpr      go to state 169
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 110

  118 cmp_op: GEQ .

    $default  reduce using rule 118 (cmp_op)


State 111

  116 cmp_op: LEQ .

    $default  reduce using rule 116 (cmp_op)


State 112

  113 cmp_op: EQL .

    $default  reduce using rule 113 (cmp_op)


State 113

  114 cmp_op: NEQ .

    $default  reduce using rule 114 (cmp_op)


State 114

  115 cmp_op: '<' .

    $default  reduce using rule 115 (cmp_op)


State 115

  117 cmp_op: '>' .

    $default  reduce using rule 117 (cmp_op)


State 116

  119 add_op: '+' .

    $default  reduce using rule 119 (add_op)


State 117

  120 add_op: '-' .

    $default  reduce using rule 120 (add_op)


State 118

   75 ComparisonExpr: AdditionExpr cmp_op . AdditionExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr           go to state 56
    AdditionExpr        go to state 170
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 119

   78 AdditionExpr: AdditionExpr add_op . MultiplicationExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr           go to state 56
    MultiplicationExpr  go to state 171
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 120

   77 AdditionExpr: MultiplicationExpr add_op . MultiplicationExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr           go to state 56
    MultiplicationExpr  go to state 172
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 121

  125 shift_op: RSHIFT .

    $default  reduce using rule 125 (shift_op)


State 122

  124 shift_op: LSHIFT .

    $default  reduce using rule 124 (shift_op)


State 123

  121 mul_op: '*' .

    $default  reduce using rule 121 (mul_op)


State 124

  122 mul_op: '/' .

    $default  reduce using rule 122 (mul_op)


State 125

  123 mul_op: '%' .

    $default  reduce using rule 123 (mul_op)


State 126

   80 MultiplicationExpr: UnaryExpr mul_op . UnaryExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr  go to state 56
    UnaryExpr  go to state 173
    Operand    go to state 70
    Literal    go to state 71
    unary_op   go to state 72


State 127

   81 MultiplicationExpr: UnaryExpr shift_op . UnaryExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr  go to state 56
    UnaryExpr  go to state 174
    Operand    go to state 70
    Literal    go to state 71
    unary_op   go to state 72


State 128

   94 Operand: Literal AS . $@19 Type

    $default  reduce using rule 93 ($@19)

    $@19  go to state 175


State 129

   44 ArrayExpr: Literal ',' . ArrayExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46

    ArrayExpr  go to state 176
    Literal    go to state 177


State 130

   46 ArrayExpr: Literal ']' .

    $default  reduce using rule 46 (ArrayExpr)


State 131

   83 UnaryExpr: unary_op UnaryExpr .

    $default  reduce using rule 83 (UnaryExpr)


State 132

    8 FunctionDeclStmt: FuncOpen '(' $@1 ParameterList ')' ARROW Type $@2 . FuncBlock

    '{'  shift, and go to state 17

    FuncBlock  go to state 178


State 133

   12 ParameterList: ParameterList ',' ID ':' Type .

    $default  reduce using rule 12 (ParameterList)


State 134

   34 DeclarationStmt: LET MUT ID . ':' Type
   36                | LET MUT ID . ':' Type '=' ExpressionStmt
   39                | LET MUT ID . '=' ExpressionStmt

    ':'  shift, and go to state 179
    '='  shift, and go to state 180


State 135

   33 DeclarationStmt: LET ID ':' . Type
   35                | LET ID ':' . Type '=' StatementList
   38                | LET ID ':' . DeclareArrayStmt $@5 '=' ExpressionStmt
   41                | LET ID ':' . Type '=' LoopStmt

    INT    shift, and go to state 23
    FLOAT  shift, and go to state 24
    BOOL   shift, and go to state 25
    '['    shift, and go to state 181
    '&'    shift, and go to state 26

    DeclareArrayStmt  go to state 182
    Type              go to state 183


State 136

   40 DeclarationStmt: LET ID '=' . Literal

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '"'        shift, and go to state 46

    Literal  go to state 184


State 137

   58 IFOpen: IF $@11 ExpressionStmt . Block

    '{'  shift, and go to state 43

    Block       go to state 185
    StartBlock  go to state 54


State 138

   67 ForStmt: FOR $@14 ID . IN ID $@15 StartBlock StatementList '}'

    IN  shift, and go to state 186


State 139

   64 WhileStmt: WHILE $@12 ExpressionStmt . $@13 Block

    $default  reduce using rule 63 ($@13)

    $@13  go to state 187


State 140

   59 PrintStmt: PRINT '(' NEWLINE . ExpressionStmt NEWLINE ')'

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr           go to state 56
    ExpressionStmt      go to state 188
    LogicalORExpr       go to state 64
    LogicalANDExpr      go to state 65
    ComparisonExpr      go to state 66
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 141

   60 PrintStmt: PRINT '(' ExpressionStmt . ')'

    ')'  shift, and go to state 189


State 142

   61 PrintStmt: PRINTLN '(' ExpressionStmt . ')'

    ')'  shift, and go to state 190


State 143

   99 Operand: ID AS $@20 . Type

    INT    shift, and go to state 23
    FLOAT  shift, and go to state 24
    BOOL   shift, and go to state 25
    '&'    shift, and go to state 26

    Type  go to state 191


State 144

  100 Operand: ID '(' ID . ',' ID ')'

    ','  shift, and go to state 192


State 145

   27 CallFunction: ID '(' ')' . ';'

    ';'  shift, and go to state 193


State 146

   97 Operand: ID '[' INT_LIT . ']'

    ']'  shift, and go to state 194


State 147

  100 Operand: ID '(' . ID ',' ID ')'

    ID  shift, and go to state 144


State 148

   96 Operand: '(' ExpressionStmt ')' .

    $default  reduce using rule 96 (Operand)


State 149

   32 StartBlock: '{' $@4 NEWLINE .

    $default  reduce using rule 32 (StartBlock)


State 150

   45 ArrayExpr: '[' Literal ',' . ArrayExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46

    ArrayExpr  go to state 195
    Literal    go to state 177


State 151

   48 ArrayExpr: '&' ID $@6 . '[' DotExpr ']'

    '['  shift, and go to state 196


State 152

  103 Literal: '"' STRING_LIT '"' .

    $default  reduce using rule 103 (Literal)


State 153

   28 Block: StartBlock RETURN Literal . ';' NEWLINE '}'

    ';'  shift, and go to state 197


State 154

   30 Block: StartBlock BREAK Literal . ';' NEWLINE '}'

    ';'  shift, and go to state 198


State 155

   29 Block: StartBlock StatementList '}' .

    $default  reduce using rule 29 (Block)


State 156

   18 Statement: DeclarationStmt ';' NEWLINE .

    $default  reduce using rule 18 (Statement)


State 157

   20 Statement: AssignmentStmt ';' NEWLINE .

    $default  reduce using rule 20 (Statement)


State 158

   54 IFStmt: IFOpen NEWLINE ELSE . $@9 Block

    $default  reduce using rule 53 ($@9)

    $@9  go to state 199


State 159

   56 IFStmt: IFOpen ELSE $@10 . Block

    '{'  shift, and go to state 43

    Block       go to state 200
    StartBlock  go to state 54


State 160

   22 Statement: PrintStmt ';' NEWLINE .

    $default  reduce using rule 22 (Statement)


State 161

  108 assign_op: ADD_ASSIGN .

    $default  reduce using rule 108 (assign_op)


State 162

  109 assign_op: SUB_ASSIGN .

    $default  reduce using rule 109 (assign_op)


State 163

  110 assign_op: MUL_ASSIGN .

    $default  reduce using rule 110 (assign_op)


State 164

  111 assign_op: DIV_ASSIGN .

    $default  reduce using rule 111 (assign_op)


State 165

  112 assign_op: REM_ASSIGN .

    $default  reduce using rule 112 (assign_op)


State 166

  107 assign_op: '=' .

    $default  reduce using rule 107 (assign_op)


State 167

   51 AssignmentStmt: ExpressionStmt $@7 assign_op . $@8 ExpressionStmt

    $default  reduce using rule 50 ($@8)

    $@8  go to state 201


State 168

   71 LogicalORExpr: LogicalANDExpr LOR LogicalANDExpr .

    $default  reduce using rule 71 (LogicalORExpr)


State 169

   73 LogicalANDExpr: ComparisonExpr LAND ComparisonExpr .

    $default  reduce using rule 73 (LogicalANDExpr)


State 170

   75 ComparisonExpr: AdditionExpr cmp_op AdditionExpr .
   78 AdditionExpr: AdditionExpr . add_op MultiplicationExpr

    '+'  shift, and go to state 116
    '-'  shift, and go to state 117

    '+'       [reduce using rule 75 (ComparisonExpr)]
    '-'       [reduce using rule 75 (ComparisonExpr)]
    $default  reduce using rule 75 (ComparisonExpr)

    add_op  go to state 119


State 171

   78 AdditionExpr: AdditionExpr add_op MultiplicationExpr .

    $default  reduce using rule 78 (AdditionExpr)


State 172

   77 AdditionExpr: MultiplicationExpr add_op MultiplicationExpr .

    $default  reduce using rule 77 (AdditionExpr)


State 173

   80 MultiplicationExpr: UnaryExpr mul_op UnaryExpr .

    $default  reduce using rule 80 (MultiplicationExpr)


State 174

   81 MultiplicationExpr: UnaryExpr shift_op UnaryExpr .

    $default  reduce using rule 81 (MultiplicationExpr)


State 175

   94 Operand: Literal AS $@19 . Type

    INT    shift, and go to state 23
    FLOAT  shift, and go to state 24
    BOOL   shift, and go to state 25
    '&'    shift, and go to state 26

    Type  go to state 202


State 176

   44 ArrayExpr: Literal ',' ArrayExpr .

    $default  reduce using rule 44 (ArrayExpr)


State 177

   44 ArrayExpr: Literal . ',' ArrayExpr
   46          | Literal . ']'

    ','  shift, and go to state 129
    ']'  shift, and go to state 130


State 178

    8 FunctionDeclStmt: FuncOpen '(' $@1 ParameterList ')' ARROW Type $@2 FuncBlock .

    $default  reduce using rule 8 (FunctionDeclStmt)


State 179

   34 DeclarationStmt: LET MUT ID ':' . Type
   36                | LET MUT ID ':' . Type '=' ExpressionStmt

    INT    shift, and go to state 23
    FLOAT  shift, and go to state 24
    BOOL   shift, and go to state 25
    '&'    shift, and go to state 26

    Type  go to state 203


State 180

   39 DeclarationStmt: LET MUT ID '=' . ExpressionStmt

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr           go to state 56
    ExpressionStmt      go to state 204
    LogicalORExpr       go to state 64
    LogicalANDExpr      go to state 65
    ComparisonExpr      go to state 66
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 181

   42 DeclareArrayStmt: '[' . DeclareArrayStmt ']'

    INT    shift, and go to state 23
    FLOAT  shift, and go to state 24
    BOOL   shift, and go to state 25
    '['    shift, and go to state 181
    '&'    shift, and go to state 26

    DeclareArrayStmt  go to state 205
    Type              go to state 206


State 182

   38 DeclarationStmt: LET ID ':' DeclareArrayStmt . $@5 '=' ExpressionStmt

    $default  reduce using rule 37 ($@5)

    $@5  go to state 207


State 183

   33 DeclarationStmt: LET ID ':' Type .
   35                | LET ID ':' Type . '=' StatementList
   41                | LET ID ':' Type . '=' LoopStmt
   43 DeclareArrayStmt: Type . ';' Literal

    ';'  shift, and go to state 208
    '='  shift, and go to state 209

    ';'  [reduce using rule 33 (DeclarationStmt)]


State 184

   40 DeclarationStmt: LET ID '=' Literal .

    $default  reduce using rule 40 (DeclarationStmt)


State 185

   58 IFOpen: IF $@11 ExpressionStmt Block .

    $default  reduce using rule 58 (IFOpen)


State 186

   67 ForStmt: FOR $@14 ID IN . ID $@15 StartBlock StatementList '}'

    ID  shift, and go to state 210


State 187

   64 WhileStmt: WHILE $@12 ExpressionStmt $@13 . Block

    '{'  shift, and go to state 43

    Block       go to state 211
    StartBlock  go to state 54


State 188

   59 PrintStmt: PRINT '(' NEWLINE ExpressionStmt . NEWLINE ')'

    NEWLINE  shift, and go to state 212


State 189

   60 PrintStmt: PRINT '(' ExpressionStmt ')' .

    $default  reduce using rule 60 (PrintStmt)


State 190

   61 PrintStmt: PRINTLN '(' ExpressionStmt ')' .

    $default  reduce using rule 61 (PrintStmt)


State 191

   99 Operand: ID AS $@20 Type .

    $default  reduce using rule 99 (Operand)


State 192

  100 Operand: ID '(' ID ',' . ID ')'

    ID  shift, and go to state 213


State 193

   27 CallFunction: ID '(' ')' ';' .

    $default  reduce using rule 27 (CallFunction)


State 194

   97 Operand: ID '[' INT_LIT ']' .

    $default  reduce using rule 97 (Operand)


State 195

   45 ArrayExpr: '[' Literal ',' ArrayExpr .

    $default  reduce using rule 45 (ArrayExpr)


State 196

   48 ArrayExpr: '&' ID $@6 '[' . DotExpr ']'

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    DOTDOT     shift, and go to state 214
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '"'        shift, and go to state 46

    DotExpr  go to state 215
    DOtOpen  go to state 216
    Literal  go to state 217


State 197

   28 Block: StartBlock RETURN Literal ';' . NEWLINE '}'

    NEWLINE  shift, and go to state 218


State 198

   30 Block: StartBlock BREAK Literal ';' . NEWLINE '}'

    NEWLINE  shift, and go to state 219


State 199

   54 IFStmt: IFOpen NEWLINE ELSE $@9 . Block

    '{'  shift, and go to state 43

    Block       go to state 220
    StartBlock  go to state 54


State 200

   56 IFStmt: IFOpen ELSE $@10 Block .

    $default  reduce using rule 56 (IFStmt)


State 201

   51 AssignmentStmt: ExpressionStmt $@7 assign_op $@8 . ExpressionStmt

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr           go to state 56
    ExpressionStmt      go to state 221
    LogicalORExpr       go to state 64
    LogicalANDExpr      go to state 65
    ComparisonExpr      go to state 66
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 202

   94 Operand: Literal AS $@19 Type .

    $default  reduce using rule 94 (Operand)


State 203

   34 DeclarationStmt: LET MUT ID ':' Type .
   36                | LET MUT ID ':' Type . '=' ExpressionStmt

    '='  shift, and go to state 222

    $default  reduce using rule 34 (DeclarationStmt)


State 204

   39 DeclarationStmt: LET MUT ID '=' ExpressionStmt .

    $default  reduce using rule 39 (DeclarationStmt)


State 205

   42 DeclareArrayStmt: '[' DeclareArrayStmt . ']'

    ']'  shift, and go to state 223


State 206

   43 DeclareArrayStmt: Type . ';' Literal

    ';'  shift, and go to state 208


State 207

   38 DeclarationStmt: LET ID ':' DeclareArrayStmt $@5 . '=' ExpressionStmt

    '='  shift, and go to state 224


State 208

   43 DeclareArrayStmt: Type ';' . Literal

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '"'        shift, and go to state 46

    Literal  go to state 225


State 209

   35 DeclarationStmt: LET ID ':' Type '=' . StatementList
   41                | LET ID ':' Type '=' . LoopStmt

    LET        shift, and go to state 30
    NEWLINE    shift, and go to state 31
    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    IF         shift, and go to state 34
    FOR        shift, and go to state 35
    WHILE      shift, and go to state 36
    LOOP       shift, and go to state 226
    PRINT      shift, and go to state 37
    PRINTLN    shift, and go to state 38
    ID         shift, and go to state 39
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '{'        shift, and go to state 43
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    StatementList       go to state 227
    Statement           go to state 51
    CallFunction        go to state 52
    Block               go to state 53
    StartBlock          go to state 54
    DeclarationStmt     go to state 55
    ArrayExpr           go to state 56
    AssignmentStmt      go to state 57
    IFStmt              go to state 58
    IFOpen              go to state 59
    PrintStmt           go to state 60
    WhileStmt           go to state 61
    ForStmt             go to state 62
    LoopStmt            go to state 228
    ExpressionStmt      go to state 63
    LogicalORExpr       go to state 64
    LogicalANDExpr      go to state 65
    ComparisonExpr      go to state 66
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 210

   67 ForStmt: FOR $@14 ID IN ID . $@15 StartBlock StatementList '}'

    $default  reduce using rule 66 ($@15)

    $@15  go to state 229


State 211

   64 WhileStmt: WHILE $@12 ExpressionStmt $@13 Block .

    $default  reduce using rule 64 (WhileStmt)


State 212

   59 PrintStmt: PRINT '(' NEWLINE ExpressionStmt NEWLINE . ')'

    ')'  shift, and go to state 230


State 213

  100 Operand: ID '(' ID ',' ID . ')'

    ')'  shift, and go to state 231


State 214

   87 DotExpr: DOTDOT . $@17 Literal

    $default  reduce using rule 86 ($@17)

    $@17  go to state 232


State 215

   48 ArrayExpr: '&' ID $@6 '[' DotExpr . ']'

    ']'  shift, and go to state 233


State 216

   88 DotExpr: DOtOpen .
   90        | DOtOpen . $@18 Literal

    ']'       reduce using rule 88 (DotExpr)
    $default  reduce using rule 89 ($@18)

    $@18  go to state 234


State 217

   91 DOtOpen: Literal . DOTDOT

    DOTDOT  shift, and go to state 235


State 218

   28 Block: StartBlock RETURN Literal ';' NEWLINE . '}'

    '}'  shift, and go to state 236


State 219

   30 Block: StartBlock BREAK Literal ';' NEWLINE . '}'

    '}'  shift, and go to state 237


State 220

   54 IFStmt: IFOpen NEWLINE ELSE $@9 Block .

    $default  reduce using rule 54 (IFStmt)


State 221

   51 AssignmentStmt: ExpressionStmt $@7 assign_op $@8 ExpressionStmt .

    $default  reduce using rule 51 (AssignmentStmt)


State 222

   36 DeclarationStmt: LET MUT ID ':' Type '=' . ExpressionStmt

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr           go to state 56
    ExpressionStmt      go to state 238
    LogicalORExpr       go to state 64
    LogicalANDExpr      go to state 65
    ComparisonExpr      go to state 66
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 223

   42 DeclareArrayStmt: '[' DeclareArrayStmt ']' .

    $default  reduce using rule 42 (DeclareArrayStmt)


State 224

   38 DeclarationStmt: LET ID ':' DeclareArrayStmt $@5 '=' . ExpressionStmt

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 86
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ArrayExpr           go to state 56
    ExpressionStmt      go to state 239
    LogicalORExpr       go to state 64
    LogicalANDExpr      go to state 65
    ComparisonExpr      go to state 66
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 225

   43 DeclareArrayStmt: Type ';' Literal .

    $default  reduce using rule 43 (DeclareArrayStmt)


State 226

   69 LoopStmt: LOOP . $@16 Block

    $default  reduce using rule 68 ($@16)

    $@16  go to state 240


State 227

   35 DeclarationStmt: LET ID ':' Type '=' StatementList .

    $default  reduce using rule 35 (DeclarationStmt)


State 228

   41 DeclarationStmt: LET ID ':' Type '=' LoopStmt .

    $default  reduce using rule 41 (DeclarationStmt)


State 229

   67 ForStmt: FOR $@14 ID IN ID $@15 . StartBlock StatementList '}'

    '{'  shift, and go to state 43

    StartBlock  go to state 241


State 230

   59 PrintStmt: PRINT '(' NEWLINE ExpressionStmt NEWLINE ')' .

    $default  reduce using rule 59 (PrintStmt)


State 231

  100 Operand: ID '(' ID ',' ID ')' .

    $default  reduce using rule 100 (Operand)


State 232

   87 DotExpr: DOTDOT $@17 . Literal

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '"'        shift, and go to state 46

    Literal  go to state 242


State 233

   48 ArrayExpr: '&' ID $@6 '[' DotExpr ']' .

    $default  reduce using rule 48 (ArrayExpr)


State 234

   90 DotExpr: DOtOpen $@18 . Literal

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '"'        shift, and go to state 46

    Literal  go to state 243


State 235

   91 DOtOpen: Literal DOTDOT .

    $default  reduce using rule 91 (DOtOpen)


State 236

   28 Block: StartBlock RETURN Literal ';' NEWLINE '}' .

    $default  reduce using rule 28 (Block)


State 237

   30 Block: StartBlock BREAK Literal ';' NEWLINE '}' .

    $default  reduce using rule 30 (Block)


State 238

   36 DeclarationStmt: LET MUT ID ':' Type '=' ExpressionStmt .

    $default  reduce using rule 36 (DeclarationStmt)


State 239

   38 DeclarationStmt: LET ID ':' DeclareArrayStmt $@5 '=' ExpressionStmt .

    $default  reduce using rule 38 (DeclarationStmt)


State 240

   69 LoopStmt: LOOP $@16 . Block

    '{'  shift, and go to state 43

    Block       go to state 244
    StartBlock  go to state 54


State 241

   67 ForStmt: FOR $@14 ID IN ID $@15 StartBlock . StatementList '}'

    LET        shift, and go to state 30
    NEWLINE    shift, and go to state 31
    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    IF         shift, and go to state 34
    FOR        shift, and go to state 35
    WHILE      shift, and go to state 36
    PRINT      shift, and go to state 37
    PRINTLN    shift, and go to state 38
    ID         shift, and go to state 39
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '{'        shift, and go to state 43
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    StatementList       go to state 245
    Statement           go to state 51
    CallFunction        go to state 52
    Block               go to state 53
    StartBlock          go to state 54
    DeclarationStmt     go to state 55
    ArrayExpr           go to state 56
    AssignmentStmt      go to state 57
    IFStmt              go to state 58
    IFOpen              go to state 59
    PrintStmt           go to state 60
    WhileStmt           go to state 61
    ForStmt             go to state 62
    ExpressionStmt      go to state 63
    LogicalORExpr       go to state 64
    LogicalANDExpr      go to state 65
    ComparisonExpr      go to state 66
    AdditionExpr        go to state 67
    MultiplicationExpr  go to state 68
    UnaryExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 242

   87 DotExpr: DOTDOT $@17 Literal .

    $default  reduce using rule 87 (DotExpr)


State 243

   90 DotExpr: DOtOpen $@18 Literal .

    $default  reduce using rule 90 (DotExpr)


State 244

   69 LoopStmt: LOOP $@16 Block .

    $default  reduce using rule 69 (LoopStmt)


State 245

   67 ForStmt: FOR $@14 ID IN ID $@15 StartBlock StatementList . '}'

    '}'  shift, and go to state 246


State 246

   67 ForStmt: FOR $@14 ID IN ID $@15 StartBlock StatementList '}' .

    $default  reduce using rule 67 (ForStmt)

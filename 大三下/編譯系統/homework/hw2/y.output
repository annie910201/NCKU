Rules useless in parser due to conflicts

   33 DeclarationStmt: LET ID ':' Type


State 39 conflicts: 2 shift/reduce
State 66 conflicts: 2 shift/reduce
State 67 conflicts: 2 shift/reduce
State 78 conflicts: 2 shift/reduce
State 170 conflicts: 2 shift/reduce
State 183 conflicts: 1 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: GlobalStatementList

    2 GlobalStatementList: GlobalStatementList GlobalStatement
    3                    | GlobalStatement

    4 GlobalStatement: FunctionDeclStmt
    5                | NEWLINE

    6 $@1: %empty

    7 $@2: %empty

    8 FunctionDeclStmt: FuncOpen '(' $@1 ParameterList ')' ARROW Type $@2 FuncBlock

    9 $@3: %empty

   10 FunctionDeclStmt: FuncOpen '(' ')' $@3 FuncBlock

   11 FuncOpen: FUNC ID

   12 ParameterList: ParameterList ',' ID ':' Type
   13              | ID ':' Type

   14 FuncBlock: '{' NEWLINE StatementList '}'

   15 StatementList: Statement
   16              | Statement StatementList

   17 Statement: Block NEWLINE
   18          | DeclarationStmt ';' NEWLINE
   19          | ExpressionStmt
   20          | AssignmentStmt ';' NEWLINE
   21          | IFStmt
   22          | PrintStmt ';' NEWLINE
   23          | WhileStmt NEWLINE
   24          | ForStmt NEWLINE
   25          | CallFunction NEWLINE
   26          | NEWLINE

   27 CallFunction: ID '(' ')' ';'

   28 Block: StartBlock RETURN Literal ';' NEWLINE '}'
   29      | StartBlock StatementList '}'
   30      | StartBlock BREAK Literal ';' NEWLINE '}'

   31 $@4: %empty

   32 StartBlock: '{' $@4 NEWLINE

   33 DeclarationStmt: LET ID ':' Type
   34                | LET MUT ID ':' Type
   35                | LET ID ':' Type '=' StatementList
   36                | LET MUT ID ':' Type '=' ExpressionStmt
   37                | LET ID ':' DeclareArrayStmt '=' ExpressionStmt
   38                | LET MUT ID '=' ExpressionStmt
   39                | LET ID '=' Literal
   40                | LET ID ':' Type '=' LoopStmt

   41 AssignmentStmt: ID assign_op ExpressionStmt

   42 IFStmt: IFOpen NEWLINE
   43       | IFOpen NEWLINE ELSE Block
   44       | IFOpen ELSE Block

   45 IFOpen: IF ExpressionStmt Block

   46 PrintStmt: PRINT '(' NEWLINE ExpressionStmt NEWLINE ')'
   47          | PRINT '(' ExpressionStmt ')'
   48          | PRINTLN '(' ExpressionStmt ')'

   49 WhileStmt: WHILE ExpressionStmt Block

   50 $@5: %empty

   51 $@6: %empty

   52 ForStmt: FOR ID IN ID $@5 StartBlock $@6 StatementList '}'

   53 LoopStmt: LOOP Block

   54 DeclareArrayStmt: '[' DeclareArrayStmt ']'
   55                 | Type ';' Literal

   56 ExpressionStmt: LogicalORExpr

   57 LogicalORExpr: LogicalANDExpr LOR LogicalANDExpr
   58              | LogicalANDExpr

   59 LogicalANDExpr: ComparisonExpr LAND ComparisonExpr
   60               | ComparisonExpr

   61 ComparisonExpr: AdditionExpr cmp_op AdditionExpr
   62               | AdditionExpr

   63 AdditionExpr: MultiplicationExpr add_op MultiplicationExpr
   64             | AdditionExpr add_op MultiplicationExpr
   65             | MultiplicationExpr

   66 MultiplicationExpr: UnaryExpr mul_op UnaryExpr
   67                   | UnaryExpr shift_op UnaryExpr
   68                   | UnaryExpr

   69 UnaryExpr: unary_op UnaryExpr
   70          | ArrayExpr
   71          | Operand

   72 ArrayExpr: Literal ',' ArrayExpr
   73          | '[' Literal ',' ArrayExpr
   74          | Literal ']'

   75 $@7: %empty

   76 ArrayExpr: '&' ID $@7 '[' DotExpr ']'

   77 $@8: %empty

   78 DotExpr: DOTDOT $@8 Literal
   79        | DOtOpen

   80 $@9: %empty

   81 DotExpr: DOtOpen $@9 Literal

   82 DOtOpen: Literal DOTDOT

   83 Operand: Literal

   84 $@10: %empty

   85 Operand: Literal AS $@10 Type
   86        | ID
   87        | '(' ExpressionStmt ')'
   88        | ID '[' INT_LIT ']'

   89 $@11: %empty

   90 Operand: ID AS $@11 Type
   91        | ID '(' ID ',' ID ')'

   92 Literal: INT_LIT
   93        | FLOAT_LIT
   94        | '"' STRING_LIT '"'
   95        | '"' '"'
   96        | TRUE
   97        | FALSE

   98 assign_op: '='
   99          | ADD_ASSIGN
  100          | SUB_ASSIGN
  101          | MUL_ASSIGN
  102          | DIV_ASSIGN
  103          | REM_ASSIGN

  104 cmp_op: EQL
  105       | NEQ
  106       | '<'
  107       | LEQ
  108       | '>'
  109       | GEQ

  110 add_op: '+'
  111       | '-'

  112 mul_op: '*'
  113       | '/'
  114       | '%'

  115 shift_op: LSHIFT
  116         | RSHIFT

  117 unary_op: '+'
  118         | '-'
  119         | '!'

  120 Type: INT
  121     | FLOAT
  122     | '&' STR
  123     | BOOL


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 119
    '"' (34) 94 95
    '%' (37) 114
    '&' (38) 76 122
    '(' (40) 8 10 27 46 47 48 87 91
    ')' (41) 8 10 27 46 47 48 87 91
    '*' (42) 112
    '+' (43) 110 117
    ',' (44) 12 72 73 91
    '-' (45) 111 118
    '/' (47) 113
    ':' (58) 12 13 33 34 35 36 37 40
    ';' (59) 18 20 22 27 28 30 55
    '<' (60) 106
    '=' (61) 35 36 37 38 39 40 98
    '>' (62) 108
    '[' (91) 54 73 76 88
    ']' (93) 54 74 76 88
    '{' (123) 14 32
    '}' (125) 14 28 29 30 52
    error (256)
    LET (258) 33 34 35 36 37 38 39 40
    MUT (259) 34 36 38
    NEWLINE (260) 5 14 17 18 20 22 23 24 25 26 28 30 32 42 43 46
    INT (261) 120
    FLOAT (262) 121
    BOOL (263) 123
    STR (264) 122
    TRUE (265) 96
    FALSE (266) 97
    GEQ (267) 109
    LEQ (268) 107
    EQL (269) 104
    NEQ (270) 105
    LOR (271) 57
    LAND (272) 59
    ADD_ASSIGN (273) 99
    SUB_ASSIGN (274) 100
    MUL_ASSIGN (275) 101
    DIV_ASSIGN (276) 102
    REM_ASSIGN (277) 103
    IF (278) 45
    ELSE (279) 43 44
    FOR (280) 52
    WHILE (281) 49
    LOOP (282) 53
    PRINT (283) 46 47
    PRINTLN (284) 48
    FUNC (285) 11
    RETURN (286) 28
    BREAK (287) 30
    ID (288) 11 12 13 27 33 34 35 36 37 38 39 40 41 52 76 86 88 90 91
    ARROW (289) 8
    AS (290) 85 90
    IN (291) 52
    DOTDOT (292) 78 82
    RSHIFT (293) 116
    LSHIFT (294) 115
    INT_LIT <i_val> (295) 88 92
    FLOAT_LIT <f_val> (296) 93
    STRING_LIT <s_val> (297) 94


Nonterminals, with rules where they appear

    $accept (63)
        on left: 0
    Program (64)
        on left: 1
        on right: 0
    GlobalStatementList (65)
        on left: 2 3
        on right: 1 2
    GlobalStatement (66)
        on left: 4 5
        on right: 2 3
    FunctionDeclStmt (67)
        on left: 8 10
        on right: 4
    $@1 (68)
        on left: 6
        on right: 8
    $@2 (69)
        on left: 7
        on right: 8
    $@3 (70)
        on left: 9
        on right: 10
    FuncOpen <s_val> (71)
        on left: 11
        on right: 8 10
    ParameterList (72)
        on left: 12 13
        on right: 8 12
    FuncBlock (73)
        on left: 14
        on right: 8 10
    StatementList (74)
        on left: 15 16
        on right: 14 16 29 35 52
    Statement (75)
        on left: 17 18 19 20 21 22 23 24 25 26
        on right: 15 16
    CallFunction (76)
        on left: 27
        on right: 25
    Block (77)
        on left: 28 29 30
        on right: 17 43 44 45 49 53
    StartBlock (78)
        on left: 32
        on right: 28 29 30 52
    $@4 (79)
        on left: 31
        on right: 32
    DeclarationStmt (80)
        on left: 33 34 35 36 37 38 39 40
        on right: 18
    AssignmentStmt (81)
        on left: 41
        on right: 20
    IFStmt (82)
        on left: 42 43 44
        on right: 21
    IFOpen (83)
        on left: 45
        on right: 42 43 44
    PrintStmt (84)
        on left: 46 47 48
        on right: 22
    WhileStmt (85)
        on left: 49
        on right: 23
    ForStmt (86)
        on left: 52
        on right: 24
    $@5 (87)
        on left: 50
        on right: 52
    $@6 (88)
        on left: 51
        on right: 52
    LoopStmt (89)
        on left: 53
        on right: 40
    DeclareArrayStmt (90)
        on left: 54 55
        on right: 37 54
    ExpressionStmt <s_val> (91)
        on left: 56
        on right: 19 36 37 38 41 45 46 47 48 49 87
    LogicalORExpr <s_val> (92)
        on left: 57 58
        on right: 56
    LogicalANDExpr <s_val> (93)
        on left: 59 60
        on right: 57 58
    ComparisonExpr <s_val> (94)
        on left: 61 62
        on right: 59 60
    AdditionExpr <s_val> (95)
        on left: 63 64 65
        on right: 61 62 64
    MultiplicationExpr <s_val> (96)
        on left: 66 67 68
        on right: 63 64 65
    UnaryExpr <s_val> (97)
        on left: 69 70 71
        on right: 66 67 68 69
    ArrayExpr <s_val> (98)
        on left: 72 73 74 76
        on right: 70 72 73
    $@7 (99)
        on left: 75
        on right: 76
    DotExpr (100)
        on left: 78 79 81
        on right: 76
    $@8 (101)
        on left: 77
        on right: 78
    $@9 (102)
        on left: 80
        on right: 81
    DOtOpen (103)
        on left: 82
        on right: 79 81
    Operand <s_val> (104)
        on left: 83 85 86 87 88 90 91
        on right: 71
    $@10 (105)
        on left: 84
        on right: 85
    $@11 (106)
        on left: 89
        on right: 90
    Literal <s_val> (107)
        on left: 92 93 94 95 96 97
        on right: 28 30 39 55 72 73 74 78 81 82 83 85
    assign_op <s_val> (108)
        on left: 98 99 100 101 102 103
        on right: 41
    cmp_op <s_val> (109)
        on left: 104 105 106 107 108 109
        on right: 61
    add_op <s_val> (110)
        on left: 110 111
        on right: 63 64
    mul_op <s_val> (111)
        on left: 112 113 114
        on right: 66
    shift_op <s_val> (112)
        on left: 115 116
        on right: 67
    unary_op <s_val> (113)
        on left: 117 118 119
        on right: 69
    Type <s_val> (114)
        on left: 120 121 122 123
        on right: 8 12 13 33 34 35 36 40 55 85 90


State 0

    0 $accept: . Program $end

    NEWLINE  shift, and go to state 1
    FUNC     shift, and go to state 2

    Program              go to state 3
    GlobalStatementList  go to state 4
    GlobalStatement      go to state 5
    FunctionDeclStmt     go to state 6
    FuncOpen             go to state 7


State 1

    5 GlobalStatement: NEWLINE .

    $default  reduce using rule 5 (GlobalStatement)


State 2

   11 FuncOpen: FUNC . ID

    ID  shift, and go to state 8


State 3

    0 $accept: Program . $end

    $end  shift, and go to state 9


State 4

    1 Program: GlobalStatementList .
    2 GlobalStatementList: GlobalStatementList . GlobalStatement

    NEWLINE  shift, and go to state 1
    FUNC     shift, and go to state 2

    $default  reduce using rule 1 (Program)

    GlobalStatement   go to state 10
    FunctionDeclStmt  go to state 6
    FuncOpen          go to state 7


State 5

    3 GlobalStatementList: GlobalStatement .

    $default  reduce using rule 3 (GlobalStatementList)


State 6

    4 GlobalStatement: FunctionDeclStmt .

    $default  reduce using rule 4 (GlobalStatement)


State 7

    8 FunctionDeclStmt: FuncOpen . '(' $@1 ParameterList ')' ARROW Type $@2 FuncBlock
   10                 | FuncOpen . '(' ')' $@3 FuncBlock

    '('  shift, and go to state 11


State 8

   11 FuncOpen: FUNC ID .

    $default  reduce using rule 11 (FuncOpen)


State 9

    0 $accept: Program $end .

    $default  accept


State 10

    2 GlobalStatementList: GlobalStatementList GlobalStatement .

    $default  reduce using rule 2 (GlobalStatementList)


State 11

    8 FunctionDeclStmt: FuncOpen '(' . $@1 ParameterList ')' ARROW Type $@2 FuncBlock
   10                 | FuncOpen '(' . ')' $@3 FuncBlock

    ')'  shift, and go to state 12

    $default  reduce using rule 6 ($@1)

    $@1  go to state 13


State 12

   10 FunctionDeclStmt: FuncOpen '(' ')' . $@3 FuncBlock

    $default  reduce using rule 9 ($@3)

    $@3  go to state 14


State 13

    8 FunctionDeclStmt: FuncOpen '(' $@1 . ParameterList ')' ARROW Type $@2 FuncBlock

    ID  shift, and go to state 15

    ParameterList  go to state 16


State 14

   10 FunctionDeclStmt: FuncOpen '(' ')' $@3 . FuncBlock

    '{'  shift, and go to state 17

    FuncBlock  go to state 18


State 15

   13 ParameterList: ID . ':' Type

    ':'  shift, and go to state 19


State 16

    8 FunctionDeclStmt: FuncOpen '(' $@1 ParameterList . ')' ARROW Type $@2 FuncBlock
   12 ParameterList: ParameterList . ',' ID ':' Type

    ')'  shift, and go to state 20
    ','  shift, and go to state 21


State 17

   14 FuncBlock: '{' . NEWLINE StatementList '}'

    NEWLINE  shift, and go to state 22


State 18

   10 FunctionDeclStmt: FuncOpen '(' ')' $@3 FuncBlock .

    $default  reduce using rule 10 (FunctionDeclStmt)


State 19

   13 ParameterList: ID ':' . Type

    INT    shift, and go to state 23
    FLOAT  shift, and go to state 24
    BOOL   shift, and go to state 25
    '&'    shift, and go to state 26

    Type  go to state 27


State 20

    8 FunctionDeclStmt: FuncOpen '(' $@1 ParameterList ')' . ARROW Type $@2 FuncBlock

    ARROW  shift, and go to state 28


State 21

   12 ParameterList: ParameterList ',' . ID ':' Type

    ID  shift, and go to state 29


State 22

   14 FuncBlock: '{' NEWLINE . StatementList '}'

    LET        shift, and go to state 30
    NEWLINE    shift, and go to state 31
    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    IF         shift, and go to state 34
    FOR        shift, and go to state 35
    WHILE      shift, and go to state 36
    PRINT      shift, and go to state 37
    PRINTLN    shift, and go to state 38
    ID         shift, and go to state 39
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '{'        shift, and go to state 43
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    StatementList       go to state 50
    Statement           go to state 51
    CallFunction        go to state 52
    Block               go to state 53
    StartBlock          go to state 54
    DeclarationStmt     go to state 55
    AssignmentStmt      go to state 56
    IFStmt              go to state 57
    IFOpen              go to state 58
    PrintStmt           go to state 59
    WhileStmt           go to state 60
    ForStmt             go to state 61
    ExpressionStmt      go to state 62
    LogicalORExpr       go to state 63
    LogicalANDExpr      go to state 64
    ComparisonExpr      go to state 65
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 23

  120 Type: INT .

    $default  reduce using rule 120 (Type)


State 24

  121 Type: FLOAT .

    $default  reduce using rule 121 (Type)


State 25

  123 Type: BOOL .

    $default  reduce using rule 123 (Type)


State 26

  122 Type: '&' . STR

    STR  shift, and go to state 73


State 27

   13 ParameterList: ID ':' Type .

    $default  reduce using rule 13 (ParameterList)


State 28

    8 FunctionDeclStmt: FuncOpen '(' $@1 ParameterList ')' ARROW . Type $@2 FuncBlock

    INT    shift, and go to state 23
    FLOAT  shift, and go to state 24
    BOOL   shift, and go to state 25
    '&'    shift, and go to state 26

    Type  go to state 74


State 29

   12 ParameterList: ParameterList ',' ID . ':' Type

    ':'  shift, and go to state 75


State 30

   33 DeclarationStmt: LET . ID ':' Type
   34                | LET . MUT ID ':' Type
   35                | LET . ID ':' Type '=' StatementList
   36                | LET . MUT ID ':' Type '=' ExpressionStmt
   37                | LET . ID ':' DeclareArrayStmt '=' ExpressionStmt
   38                | LET . MUT ID '=' ExpressionStmt
   39                | LET . ID '=' Literal
   40                | LET . ID ':' Type '=' LoopStmt

    MUT  shift, and go to state 76
    ID   shift, and go to state 77


State 31

   26 Statement: NEWLINE .

    $default  reduce using rule 26 (Statement)


State 32

   96 Literal: TRUE .

    $default  reduce using rule 96 (Literal)


State 33

   97 Literal: FALSE .

    $default  reduce using rule 97 (Literal)


State 34

   45 IFOpen: IF . ExpressionStmt Block

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ExpressionStmt      go to state 79
    LogicalORExpr       go to state 63
    LogicalANDExpr      go to state 64
    ComparisonExpr      go to state 65
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 35

   52 ForStmt: FOR . ID IN ID $@5 StartBlock $@6 StatementList '}'

    ID  shift, and go to state 80


State 36

   49 WhileStmt: WHILE . ExpressionStmt Block

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ExpressionStmt      go to state 81
    LogicalORExpr       go to state 63
    LogicalANDExpr      go to state 64
    ComparisonExpr      go to state 65
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 37

   46 PrintStmt: PRINT . '(' NEWLINE ExpressionStmt NEWLINE ')'
   47          | PRINT . '(' ExpressionStmt ')'

    '('  shift, and go to state 82


State 38

   48 PrintStmt: PRINTLN . '(' ExpressionStmt ')'

    '('  shift, and go to state 83


State 39

   27 CallFunction: ID . '(' ')' ';'
   41 AssignmentStmt: ID . assign_op ExpressionStmt
   86 Operand: ID .
   88        | ID . '[' INT_LIT ']'
   90        | ID . AS $@11 Type
   91        | ID . '(' ID ',' ID ')'

    ADD_ASSIGN  shift, and go to state 84
    SUB_ASSIGN  shift, and go to state 85
    MUL_ASSIGN  shift, and go to state 86
    DIV_ASSIGN  shift, and go to state 87
    REM_ASSIGN  shift, and go to state 88
    AS          shift, and go to state 89
    '('         shift, and go to state 90
    '='         shift, and go to state 91
    '['         shift, and go to state 92

    '('       [reduce using rule 86 (Operand)]
    '['       [reduce using rule 86 (Operand)]
    $default  reduce using rule 86 (Operand)

    assign_op  go to state 93


State 40

   92 Literal: INT_LIT .

    $default  reduce using rule 92 (Literal)


State 41

   93 Literal: FLOAT_LIT .

    $default  reduce using rule 93 (Literal)


State 42

   87 Operand: '(' . ExpressionStmt ')'

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ExpressionStmt      go to state 94
    LogicalORExpr       go to state 63
    LogicalANDExpr      go to state 64
    ComparisonExpr      go to state 65
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 43

   32 StartBlock: '{' . $@4 NEWLINE

    $default  reduce using rule 31 ($@4)

    $@4  go to state 95


State 44

   73 ArrayExpr: '[' . Literal ',' ArrayExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '"'        shift, and go to state 46

    Literal  go to state 96


State 45

   76 ArrayExpr: '&' . ID $@7 '[' DotExpr ']'

    ID  shift, and go to state 97


State 46

   94 Literal: '"' . STRING_LIT '"'
   95        | '"' . '"'

    STRING_LIT  shift, and go to state 98
    '"'         shift, and go to state 99


State 47

  117 unary_op: '+' .

    $default  reduce using rule 117 (unary_op)


State 48

  118 unary_op: '-' .

    $default  reduce using rule 118 (unary_op)


State 49

  119 unary_op: '!' .

    $default  reduce using rule 119 (unary_op)


State 50

   14 FuncBlock: '{' NEWLINE StatementList . '}'

    '}'  shift, and go to state 100


State 51

   15 StatementList: Statement .
   16              | Statement . StatementList

    LET        shift, and go to state 30
    NEWLINE    shift, and go to state 31
    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    IF         shift, and go to state 34
    FOR        shift, and go to state 35
    WHILE      shift, and go to state 36
    PRINT      shift, and go to state 37
    PRINTLN    shift, and go to state 38
    ID         shift, and go to state 39
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '{'        shift, and go to state 43
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    $default  reduce using rule 15 (StatementList)

    StatementList       go to state 101
    Statement           go to state 51
    CallFunction        go to state 52
    Block               go to state 53
    StartBlock          go to state 54
    DeclarationStmt     go to state 55
    AssignmentStmt      go to state 56
    IFStmt              go to state 57
    IFOpen              go to state 58
    PrintStmt           go to state 59
    WhileStmt           go to state 60
    ForStmt             go to state 61
    ExpressionStmt      go to state 62
    LogicalORExpr       go to state 63
    LogicalANDExpr      go to state 64
    ComparisonExpr      go to state 65
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 52

   25 Statement: CallFunction . NEWLINE

    NEWLINE  shift, and go to state 102


State 53

   17 Statement: Block . NEWLINE

    NEWLINE  shift, and go to state 103


State 54

   28 Block: StartBlock . RETURN Literal ';' NEWLINE '}'
   29      | StartBlock . StatementList '}'
   30      | StartBlock . BREAK Literal ';' NEWLINE '}'

    LET        shift, and go to state 30
    NEWLINE    shift, and go to state 31
    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    IF         shift, and go to state 34
    FOR        shift, and go to state 35
    WHILE      shift, and go to state 36
    PRINT      shift, and go to state 37
    PRINTLN    shift, and go to state 38
    RETURN     shift, and go to state 104
    BREAK      shift, and go to state 105
    ID         shift, and go to state 39
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '{'        shift, and go to state 43
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    StatementList       go to state 106
    Statement           go to state 51
    CallFunction        go to state 52
    Block               go to state 53
    StartBlock          go to state 54
    DeclarationStmt     go to state 55
    AssignmentStmt      go to state 56
    IFStmt              go to state 57
    IFOpen              go to state 58
    PrintStmt           go to state 59
    WhileStmt           go to state 60
    ForStmt             go to state 61
    ExpressionStmt      go to state 62
    LogicalORExpr       go to state 63
    LogicalANDExpr      go to state 64
    ComparisonExpr      go to state 65
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 55

   18 Statement: DeclarationStmt . ';' NEWLINE

    ';'  shift, and go to state 107


State 56

   20 Statement: AssignmentStmt . ';' NEWLINE

    ';'  shift, and go to state 108


State 57

   21 Statement: IFStmt .

    $default  reduce using rule 21 (Statement)


State 58

   42 IFStmt: IFOpen . NEWLINE
   43       | IFOpen . NEWLINE ELSE Block
   44       | IFOpen . ELSE Block

    NEWLINE  shift, and go to state 109
    ELSE     shift, and go to state 110


State 59

   22 Statement: PrintStmt . ';' NEWLINE

    ';'  shift, and go to state 111


State 60

   23 Statement: WhileStmt . NEWLINE

    NEWLINE  shift, and go to state 112


State 61

   24 Statement: ForStmt . NEWLINE

    NEWLINE  shift, and go to state 113


State 62

   19 Statement: ExpressionStmt .

    $default  reduce using rule 19 (Statement)


State 63

   56 ExpressionStmt: LogicalORExpr .

    $default  reduce using rule 56 (ExpressionStmt)


State 64

   57 LogicalORExpr: LogicalANDExpr . LOR LogicalANDExpr
   58              | LogicalANDExpr .

    LOR  shift, and go to state 114

    $default  reduce using rule 58 (LogicalORExpr)


State 65

   59 LogicalANDExpr: ComparisonExpr . LAND ComparisonExpr
   60               | ComparisonExpr .

    LAND  shift, and go to state 115

    $default  reduce using rule 60 (LogicalANDExpr)


State 66

   61 ComparisonExpr: AdditionExpr . cmp_op AdditionExpr
   62               | AdditionExpr .
   64 AdditionExpr: AdditionExpr . add_op MultiplicationExpr

    GEQ  shift, and go to state 116
    LEQ  shift, and go to state 117
    EQL  shift, and go to state 118
    NEQ  shift, and go to state 119
    '<'  shift, and go to state 120
    '>'  shift, and go to state 121
    '+'  shift, and go to state 122
    '-'  shift, and go to state 123

    '+'       [reduce using rule 62 (ComparisonExpr)]
    '-'       [reduce using rule 62 (ComparisonExpr)]
    $default  reduce using rule 62 (ComparisonExpr)

    cmp_op  go to state 124
    add_op  go to state 125


State 67

   63 AdditionExpr: MultiplicationExpr . add_op MultiplicationExpr
   65             | MultiplicationExpr .

    '+'  shift, and go to state 122
    '-'  shift, and go to state 123

    '+'       [reduce using rule 65 (AdditionExpr)]
    '-'       [reduce using rule 65 (AdditionExpr)]
    $default  reduce using rule 65 (AdditionExpr)

    add_op  go to state 126


State 68

   66 MultiplicationExpr: UnaryExpr . mul_op UnaryExpr
   67                   | UnaryExpr . shift_op UnaryExpr
   68                   | UnaryExpr .

    RSHIFT  shift, and go to state 127
    LSHIFT  shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    '%'     shift, and go to state 131

    $default  reduce using rule 68 (MultiplicationExpr)

    mul_op    go to state 132
    shift_op  go to state 133


State 69

   70 UnaryExpr: ArrayExpr .

    $default  reduce using rule 70 (UnaryExpr)


State 70

   71 UnaryExpr: Operand .

    $default  reduce using rule 71 (UnaryExpr)


State 71

   72 ArrayExpr: Literal . ',' ArrayExpr
   74          | Literal . ']'
   83 Operand: Literal .
   85        | Literal . AS $@10 Type

    AS   shift, and go to state 134
    ','  shift, and go to state 135
    ']'  shift, and go to state 136

    $default  reduce using rule 83 (Operand)


State 72

   69 UnaryExpr: unary_op . UnaryExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    UnaryExpr  go to state 137
    ArrayExpr  go to state 69
    Operand    go to state 70
    Literal    go to state 71
    unary_op   go to state 72


State 73

  122 Type: '&' STR .

    $default  reduce using rule 122 (Type)


State 74

    8 FunctionDeclStmt: FuncOpen '(' $@1 ParameterList ')' ARROW Type . $@2 FuncBlock

    $default  reduce using rule 7 ($@2)

    $@2  go to state 138


State 75

   12 ParameterList: ParameterList ',' ID ':' . Type

    INT    shift, and go to state 23
    FLOAT  shift, and go to state 24
    BOOL   shift, and go to state 25
    '&'    shift, and go to state 26

    Type  go to state 139


State 76

   34 DeclarationStmt: LET MUT . ID ':' Type
   36                | LET MUT . ID ':' Type '=' ExpressionStmt
   38                | LET MUT . ID '=' ExpressionStmt

    ID  shift, and go to state 140


State 77

   33 DeclarationStmt: LET ID . ':' Type
   35                | LET ID . ':' Type '=' StatementList
   37                | LET ID . ':' DeclareArrayStmt '=' ExpressionStmt
   39                | LET ID . '=' Literal
   40                | LET ID . ':' Type '=' LoopStmt

    ':'  shift, and go to state 141
    '='  shift, and go to state 142


State 78

   86 Operand: ID .
   88        | ID . '[' INT_LIT ']'
   90        | ID . AS $@11 Type
   91        | ID . '(' ID ',' ID ')'

    AS   shift, and go to state 89
    '('  shift, and go to state 143
    '['  shift, and go to state 92

    '('       [reduce using rule 86 (Operand)]
    '['       [reduce using rule 86 (Operand)]
    $default  reduce using rule 86 (Operand)


State 79

   45 IFOpen: IF ExpressionStmt . Block

    '{'  shift, and go to state 43

    Block       go to state 144
    StartBlock  go to state 54


State 80

   52 ForStmt: FOR ID . IN ID $@5 StartBlock $@6 StatementList '}'

    IN  shift, and go to state 145


State 81

   49 WhileStmt: WHILE ExpressionStmt . Block

    '{'  shift, and go to state 43

    Block       go to state 146
    StartBlock  go to state 54


State 82

   46 PrintStmt: PRINT '(' . NEWLINE ExpressionStmt NEWLINE ')'
   47          | PRINT '(' . ExpressionStmt ')'

    NEWLINE    shift, and go to state 147
    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ExpressionStmt      go to state 148
    LogicalORExpr       go to state 63
    LogicalANDExpr      go to state 64
    ComparisonExpr      go to state 65
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 83

   48 PrintStmt: PRINTLN '(' . ExpressionStmt ')'

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ExpressionStmt      go to state 149
    LogicalORExpr       go to state 63
    LogicalANDExpr      go to state 64
    ComparisonExpr      go to state 65
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 84

   99 assign_op: ADD_ASSIGN .

    $default  reduce using rule 99 (assign_op)


State 85

  100 assign_op: SUB_ASSIGN .

    $default  reduce using rule 100 (assign_op)


State 86

  101 assign_op: MUL_ASSIGN .

    $default  reduce using rule 101 (assign_op)


State 87

  102 assign_op: DIV_ASSIGN .

    $default  reduce using rule 102 (assign_op)


State 88

  103 assign_op: REM_ASSIGN .

    $default  reduce using rule 103 (assign_op)


State 89

   90 Operand: ID AS . $@11 Type

    $default  reduce using rule 89 ($@11)

    $@11  go to state 150


State 90

   27 CallFunction: ID '(' . ')' ';'
   91 Operand: ID '(' . ID ',' ID ')'

    ID   shift, and go to state 151
    ')'  shift, and go to state 152


State 91

   98 assign_op: '=' .

    $default  reduce using rule 98 (assign_op)


State 92

   88 Operand: ID '[' . INT_LIT ']'

    INT_LIT  shift, and go to state 153


State 93

   41 AssignmentStmt: ID assign_op . ExpressionStmt

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ExpressionStmt      go to state 154
    LogicalORExpr       go to state 63
    LogicalANDExpr      go to state 64
    ComparisonExpr      go to state 65
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 94

   87 Operand: '(' ExpressionStmt . ')'

    ')'  shift, and go to state 155


State 95

   32 StartBlock: '{' $@4 . NEWLINE

    NEWLINE  shift, and go to state 156


State 96

   73 ArrayExpr: '[' Literal . ',' ArrayExpr

    ','  shift, and go to state 157


State 97

   76 ArrayExpr: '&' ID . $@7 '[' DotExpr ']'

    $default  reduce using rule 75 ($@7)

    $@7  go to state 158


State 98

   94 Literal: '"' STRING_LIT . '"'

    '"'  shift, and go to state 159


State 99

   95 Literal: '"' '"' .

    $default  reduce using rule 95 (Literal)


State 100

   14 FuncBlock: '{' NEWLINE StatementList '}' .

    $default  reduce using rule 14 (FuncBlock)


State 101

   16 StatementList: Statement StatementList .

    $default  reduce using rule 16 (StatementList)


State 102

   25 Statement: CallFunction NEWLINE .

    $default  reduce using rule 25 (Statement)


State 103

   17 Statement: Block NEWLINE .

    $default  reduce using rule 17 (Statement)


State 104

   28 Block: StartBlock RETURN . Literal ';' NEWLINE '}'

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '"'        shift, and go to state 46

    Literal  go to state 160


State 105

   30 Block: StartBlock BREAK . Literal ';' NEWLINE '}'

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '"'        shift, and go to state 46

    Literal  go to state 161


State 106

   29 Block: StartBlock StatementList . '}'

    '}'  shift, and go to state 162


State 107

   18 Statement: DeclarationStmt ';' . NEWLINE

    NEWLINE  shift, and go to state 163


State 108

   20 Statement: AssignmentStmt ';' . NEWLINE

    NEWLINE  shift, and go to state 164


State 109

   42 IFStmt: IFOpen NEWLINE .
   43       | IFOpen NEWLINE . ELSE Block

    ELSE  shift, and go to state 165

    $default  reduce using rule 42 (IFStmt)


State 110

   44 IFStmt: IFOpen ELSE . Block

    '{'  shift, and go to state 43

    Block       go to state 166
    StartBlock  go to state 54


State 111

   22 Statement: PrintStmt ';' . NEWLINE

    NEWLINE  shift, and go to state 167


State 112

   23 Statement: WhileStmt NEWLINE .

    $default  reduce using rule 23 (Statement)


State 113

   24 Statement: ForStmt NEWLINE .

    $default  reduce using rule 24 (Statement)


State 114

   57 LogicalORExpr: LogicalANDExpr LOR . LogicalANDExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    LogicalANDExpr      go to state 168
    ComparisonExpr      go to state 65
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 115

   59 LogicalANDExpr: ComparisonExpr LAND . ComparisonExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ComparisonExpr      go to state 169
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 116

  109 cmp_op: GEQ .

    $default  reduce using rule 109 (cmp_op)


State 117

  107 cmp_op: LEQ .

    $default  reduce using rule 107 (cmp_op)


State 118

  104 cmp_op: EQL .

    $default  reduce using rule 104 (cmp_op)


State 119

  105 cmp_op: NEQ .

    $default  reduce using rule 105 (cmp_op)


State 120

  106 cmp_op: '<' .

    $default  reduce using rule 106 (cmp_op)


State 121

  108 cmp_op: '>' .

    $default  reduce using rule 108 (cmp_op)


State 122

  110 add_op: '+' .

    $default  reduce using rule 110 (add_op)


State 123

  111 add_op: '-' .

    $default  reduce using rule 111 (add_op)


State 124

   61 ComparisonExpr: AdditionExpr cmp_op . AdditionExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    AdditionExpr        go to state 170
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 125

   64 AdditionExpr: AdditionExpr add_op . MultiplicationExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    MultiplicationExpr  go to state 171
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 126

   63 AdditionExpr: MultiplicationExpr add_op . MultiplicationExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    MultiplicationExpr  go to state 172
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 127

  116 shift_op: RSHIFT .

    $default  reduce using rule 116 (shift_op)


State 128

  115 shift_op: LSHIFT .

    $default  reduce using rule 115 (shift_op)


State 129

  112 mul_op: '*' .

    $default  reduce using rule 112 (mul_op)


State 130

  113 mul_op: '/' .

    $default  reduce using rule 113 (mul_op)


State 131

  114 mul_op: '%' .

    $default  reduce using rule 114 (mul_op)


State 132

   66 MultiplicationExpr: UnaryExpr mul_op . UnaryExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    UnaryExpr  go to state 173
    ArrayExpr  go to state 69
    Operand    go to state 70
    Literal    go to state 71
    unary_op   go to state 72


State 133

   67 MultiplicationExpr: UnaryExpr shift_op . UnaryExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    UnaryExpr  go to state 174
    ArrayExpr  go to state 69
    Operand    go to state 70
    Literal    go to state 71
    unary_op   go to state 72


State 134

   85 Operand: Literal AS . $@10 Type

    $default  reduce using rule 84 ($@10)

    $@10  go to state 175


State 135

   72 ArrayExpr: Literal ',' . ArrayExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46

    ArrayExpr  go to state 176
    Literal    go to state 177


State 136

   74 ArrayExpr: Literal ']' .

    $default  reduce using rule 74 (ArrayExpr)


State 137

   69 UnaryExpr: unary_op UnaryExpr .

    $default  reduce using rule 69 (UnaryExpr)


State 138

    8 FunctionDeclStmt: FuncOpen '(' $@1 ParameterList ')' ARROW Type $@2 . FuncBlock

    '{'  shift, and go to state 17

    FuncBlock  go to state 178


State 139

   12 ParameterList: ParameterList ',' ID ':' Type .

    $default  reduce using rule 12 (ParameterList)


State 140

   34 DeclarationStmt: LET MUT ID . ':' Type
   36                | LET MUT ID . ':' Type '=' ExpressionStmt
   38                | LET MUT ID . '=' ExpressionStmt

    ':'  shift, and go to state 179
    '='  shift, and go to state 180


State 141

   33 DeclarationStmt: LET ID ':' . Type
   35                | LET ID ':' . Type '=' StatementList
   37                | LET ID ':' . DeclareArrayStmt '=' ExpressionStmt
   40                | LET ID ':' . Type '=' LoopStmt

    INT    shift, and go to state 23
    FLOAT  shift, and go to state 24
    BOOL   shift, and go to state 25
    '['    shift, and go to state 181
    '&'    shift, and go to state 26

    DeclareArrayStmt  go to state 182
    Type              go to state 183


State 142

   39 DeclarationStmt: LET ID '=' . Literal

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '"'        shift, and go to state 46

    Literal  go to state 184


State 143

   91 Operand: ID '(' . ID ',' ID ')'

    ID  shift, and go to state 151


State 144

   45 IFOpen: IF ExpressionStmt Block .

    $default  reduce using rule 45 (IFOpen)


State 145

   52 ForStmt: FOR ID IN . ID $@5 StartBlock $@6 StatementList '}'

    ID  shift, and go to state 185


State 146

   49 WhileStmt: WHILE ExpressionStmt Block .

    $default  reduce using rule 49 (WhileStmt)


State 147

   46 PrintStmt: PRINT '(' NEWLINE . ExpressionStmt NEWLINE ')'

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ExpressionStmt      go to state 186
    LogicalORExpr       go to state 63
    LogicalANDExpr      go to state 64
    ComparisonExpr      go to state 65
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 148

   47 PrintStmt: PRINT '(' ExpressionStmt . ')'

    ')'  shift, and go to state 187


State 149

   48 PrintStmt: PRINTLN '(' ExpressionStmt . ')'

    ')'  shift, and go to state 188


State 150

   90 Operand: ID AS $@11 . Type

    INT    shift, and go to state 23
    FLOAT  shift, and go to state 24
    BOOL   shift, and go to state 25
    '&'    shift, and go to state 26

    Type  go to state 189


State 151

   91 Operand: ID '(' ID . ',' ID ')'

    ','  shift, and go to state 190


State 152

   27 CallFunction: ID '(' ')' . ';'

    ';'  shift, and go to state 191


State 153

   88 Operand: ID '[' INT_LIT . ']'

    ']'  shift, and go to state 192


State 154

   41 AssignmentStmt: ID assign_op ExpressionStmt .

    $default  reduce using rule 41 (AssignmentStmt)


State 155

   87 Operand: '(' ExpressionStmt ')' .

    $default  reduce using rule 87 (Operand)


State 156

   32 StartBlock: '{' $@4 NEWLINE .

    $default  reduce using rule 32 (StartBlock)


State 157

   73 ArrayExpr: '[' Literal ',' . ArrayExpr

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46

    ArrayExpr  go to state 193
    Literal    go to state 177


State 158

   76 ArrayExpr: '&' ID $@7 . '[' DotExpr ']'

    '['  shift, and go to state 194


State 159

   94 Literal: '"' STRING_LIT '"' .

    $default  reduce using rule 94 (Literal)


State 160

   28 Block: StartBlock RETURN Literal . ';' NEWLINE '}'

    ';'  shift, and go to state 195


State 161

   30 Block: StartBlock BREAK Literal . ';' NEWLINE '}'

    ';'  shift, and go to state 196


State 162

   29 Block: StartBlock StatementList '}' .

    $default  reduce using rule 29 (Block)


State 163

   18 Statement: DeclarationStmt ';' NEWLINE .

    $default  reduce using rule 18 (Statement)


State 164

   20 Statement: AssignmentStmt ';' NEWLINE .

    $default  reduce using rule 20 (Statement)


State 165

   43 IFStmt: IFOpen NEWLINE ELSE . Block

    '{'  shift, and go to state 43

    Block       go to state 197
    StartBlock  go to state 54


State 166

   44 IFStmt: IFOpen ELSE Block .

    $default  reduce using rule 44 (IFStmt)


State 167

   22 Statement: PrintStmt ';' NEWLINE .

    $default  reduce using rule 22 (Statement)


State 168

   57 LogicalORExpr: LogicalANDExpr LOR LogicalANDExpr .

    $default  reduce using rule 57 (LogicalORExpr)


State 169

   59 LogicalANDExpr: ComparisonExpr LAND ComparisonExpr .

    $default  reduce using rule 59 (LogicalANDExpr)


State 170

   61 ComparisonExpr: AdditionExpr cmp_op AdditionExpr .
   64 AdditionExpr: AdditionExpr . add_op MultiplicationExpr

    '+'  shift, and go to state 122
    '-'  shift, and go to state 123

    '+'       [reduce using rule 61 (ComparisonExpr)]
    '-'       [reduce using rule 61 (ComparisonExpr)]
    $default  reduce using rule 61 (ComparisonExpr)

    add_op  go to state 125


State 171

   64 AdditionExpr: AdditionExpr add_op MultiplicationExpr .

    $default  reduce using rule 64 (AdditionExpr)


State 172

   63 AdditionExpr: MultiplicationExpr add_op MultiplicationExpr .

    $default  reduce using rule 63 (AdditionExpr)


State 173

   66 MultiplicationExpr: UnaryExpr mul_op UnaryExpr .

    $default  reduce using rule 66 (MultiplicationExpr)


State 174

   67 MultiplicationExpr: UnaryExpr shift_op UnaryExpr .

    $default  reduce using rule 67 (MultiplicationExpr)


State 175

   85 Operand: Literal AS $@10 . Type

    INT    shift, and go to state 23
    FLOAT  shift, and go to state 24
    BOOL   shift, and go to state 25
    '&'    shift, and go to state 26

    Type  go to state 198


State 176

   72 ArrayExpr: Literal ',' ArrayExpr .

    $default  reduce using rule 72 (ArrayExpr)


State 177

   72 ArrayExpr: Literal . ',' ArrayExpr
   74          | Literal . ']'

    ','  shift, and go to state 135
    ']'  shift, and go to state 136


State 178

    8 FunctionDeclStmt: FuncOpen '(' $@1 ParameterList ')' ARROW Type $@2 FuncBlock .

    $default  reduce using rule 8 (FunctionDeclStmt)


State 179

   34 DeclarationStmt: LET MUT ID ':' . Type
   36                | LET MUT ID ':' . Type '=' ExpressionStmt

    INT    shift, and go to state 23
    FLOAT  shift, and go to state 24
    BOOL   shift, and go to state 25
    '&'    shift, and go to state 26

    Type  go to state 199


State 180

   38 DeclarationStmt: LET MUT ID '=' . ExpressionStmt

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ExpressionStmt      go to state 200
    LogicalORExpr       go to state 63
    LogicalANDExpr      go to state 64
    ComparisonExpr      go to state 65
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 181

   54 DeclareArrayStmt: '[' . DeclareArrayStmt ']'

    INT    shift, and go to state 23
    FLOAT  shift, and go to state 24
    BOOL   shift, and go to state 25
    '['    shift, and go to state 181
    '&'    shift, and go to state 26

    DeclareArrayStmt  go to state 201
    Type              go to state 202


State 182

   37 DeclarationStmt: LET ID ':' DeclareArrayStmt . '=' ExpressionStmt

    '='  shift, and go to state 203


State 183

   33 DeclarationStmt: LET ID ':' Type .
   35                | LET ID ':' Type . '=' StatementList
   40                | LET ID ':' Type . '=' LoopStmt
   55 DeclareArrayStmt: Type . ';' Literal

    ';'  shift, and go to state 204
    '='  shift, and go to state 205

    ';'  [reduce using rule 33 (DeclarationStmt)]


State 184

   39 DeclarationStmt: LET ID '=' Literal .

    $default  reduce using rule 39 (DeclarationStmt)


State 185

   52 ForStmt: FOR ID IN ID . $@5 StartBlock $@6 StatementList '}'

    $default  reduce using rule 50 ($@5)

    $@5  go to state 206


State 186

   46 PrintStmt: PRINT '(' NEWLINE ExpressionStmt . NEWLINE ')'

    NEWLINE  shift, and go to state 207


State 187

   47 PrintStmt: PRINT '(' ExpressionStmt ')' .

    $default  reduce using rule 47 (PrintStmt)


State 188

   48 PrintStmt: PRINTLN '(' ExpressionStmt ')' .

    $default  reduce using rule 48 (PrintStmt)


State 189

   90 Operand: ID AS $@11 Type .

    $default  reduce using rule 90 (Operand)


State 190

   91 Operand: ID '(' ID ',' . ID ')'

    ID  shift, and go to state 208


State 191

   27 CallFunction: ID '(' ')' ';' .

    $default  reduce using rule 27 (CallFunction)


State 192

   88 Operand: ID '[' INT_LIT ']' .

    $default  reduce using rule 88 (Operand)


State 193

   73 ArrayExpr: '[' Literal ',' ArrayExpr .

    $default  reduce using rule 73 (ArrayExpr)


State 194

   76 ArrayExpr: '&' ID $@7 '[' . DotExpr ']'

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    DOTDOT     shift, and go to state 209
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '"'        shift, and go to state 46

    DotExpr  go to state 210
    DOtOpen  go to state 211
    Literal  go to state 212


State 195

   28 Block: StartBlock RETURN Literal ';' . NEWLINE '}'

    NEWLINE  shift, and go to state 213


State 196

   30 Block: StartBlock BREAK Literal ';' . NEWLINE '}'

    NEWLINE  shift, and go to state 214


State 197

   43 IFStmt: IFOpen NEWLINE ELSE Block .

    $default  reduce using rule 43 (IFStmt)


State 198

   85 Operand: Literal AS $@10 Type .

    $default  reduce using rule 85 (Operand)


State 199

   34 DeclarationStmt: LET MUT ID ':' Type .
   36                | LET MUT ID ':' Type . '=' ExpressionStmt

    '='  shift, and go to state 215

    $default  reduce using rule 34 (DeclarationStmt)


State 200

   38 DeclarationStmt: LET MUT ID '=' ExpressionStmt .

    $default  reduce using rule 38 (DeclarationStmt)


State 201

   54 DeclareArrayStmt: '[' DeclareArrayStmt . ']'

    ']'  shift, and go to state 216


State 202

   55 DeclareArrayStmt: Type . ';' Literal

    ';'  shift, and go to state 204


State 203

   37 DeclarationStmt: LET ID ':' DeclareArrayStmt '=' . ExpressionStmt

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ExpressionStmt      go to state 217
    LogicalORExpr       go to state 63
    LogicalANDExpr      go to state 64
    ComparisonExpr      go to state 65
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 204

   55 DeclareArrayStmt: Type ';' . Literal

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '"'        shift, and go to state 46

    Literal  go to state 218


State 205

   35 DeclarationStmt: LET ID ':' Type '=' . StatementList
   40                | LET ID ':' Type '=' . LoopStmt

    LET        shift, and go to state 30
    NEWLINE    shift, and go to state 31
    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    IF         shift, and go to state 34
    FOR        shift, and go to state 35
    WHILE      shift, and go to state 36
    LOOP       shift, and go to state 219
    PRINT      shift, and go to state 37
    PRINTLN    shift, and go to state 38
    ID         shift, and go to state 39
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '{'        shift, and go to state 43
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    StatementList       go to state 220
    Statement           go to state 51
    CallFunction        go to state 52
    Block               go to state 53
    StartBlock          go to state 54
    DeclarationStmt     go to state 55
    AssignmentStmt      go to state 56
    IFStmt              go to state 57
    IFOpen              go to state 58
    PrintStmt           go to state 59
    WhileStmt           go to state 60
    ForStmt             go to state 61
    LoopStmt            go to state 221
    ExpressionStmt      go to state 62
    LogicalORExpr       go to state 63
    LogicalANDExpr      go to state 64
    ComparisonExpr      go to state 65
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 206

   52 ForStmt: FOR ID IN ID $@5 . StartBlock $@6 StatementList '}'

    '{'  shift, and go to state 43

    StartBlock  go to state 222


State 207

   46 PrintStmt: PRINT '(' NEWLINE ExpressionStmt NEWLINE . ')'

    ')'  shift, and go to state 223


State 208

   91 Operand: ID '(' ID ',' ID . ')'

    ')'  shift, and go to state 224


State 209

   78 DotExpr: DOTDOT . $@8 Literal

    $default  reduce using rule 77 ($@8)

    $@8  go to state 225


State 210

   76 ArrayExpr: '&' ID $@7 '[' DotExpr . ']'

    ']'  shift, and go to state 226


State 211

   79 DotExpr: DOtOpen .
   81        | DOtOpen . $@9 Literal

    ']'       reduce using rule 79 (DotExpr)
    $default  reduce using rule 80 ($@9)

    $@9  go to state 227


State 212

   82 DOtOpen: Literal . DOTDOT

    DOTDOT  shift, and go to state 228


State 213

   28 Block: StartBlock RETURN Literal ';' NEWLINE . '}'

    '}'  shift, and go to state 229


State 214

   30 Block: StartBlock BREAK Literal ';' NEWLINE . '}'

    '}'  shift, and go to state 230


State 215

   36 DeclarationStmt: LET MUT ID ':' Type '=' . ExpressionStmt

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    ID         shift, and go to state 78
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    ExpressionStmt      go to state 231
    LogicalORExpr       go to state 63
    LogicalANDExpr      go to state 64
    ComparisonExpr      go to state 65
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 216

   54 DeclareArrayStmt: '[' DeclareArrayStmt ']' .

    $default  reduce using rule 54 (DeclareArrayStmt)


State 217

   37 DeclarationStmt: LET ID ':' DeclareArrayStmt '=' ExpressionStmt .

    $default  reduce using rule 37 (DeclarationStmt)


State 218

   55 DeclareArrayStmt: Type ';' Literal .

    $default  reduce using rule 55 (DeclareArrayStmt)


State 219

   53 LoopStmt: LOOP . Block

    '{'  shift, and go to state 43

    Block       go to state 232
    StartBlock  go to state 54


State 220

   35 DeclarationStmt: LET ID ':' Type '=' StatementList .

    $default  reduce using rule 35 (DeclarationStmt)


State 221

   40 DeclarationStmt: LET ID ':' Type '=' LoopStmt .

    $default  reduce using rule 40 (DeclarationStmt)


State 222

   52 ForStmt: FOR ID IN ID $@5 StartBlock . $@6 StatementList '}'

    $default  reduce using rule 51 ($@6)

    $@6  go to state 233


State 223

   46 PrintStmt: PRINT '(' NEWLINE ExpressionStmt NEWLINE ')' .

    $default  reduce using rule 46 (PrintStmt)


State 224

   91 Operand: ID '(' ID ',' ID ')' .

    $default  reduce using rule 91 (Operand)


State 225

   78 DotExpr: DOTDOT $@8 . Literal

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '"'        shift, and go to state 46

    Literal  go to state 234


State 226

   76 ArrayExpr: '&' ID $@7 '[' DotExpr ']' .

    $default  reduce using rule 76 (ArrayExpr)


State 227

   81 DotExpr: DOtOpen $@9 . Literal

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '"'        shift, and go to state 46

    Literal  go to state 235


State 228

   82 DOtOpen: Literal DOTDOT .

    $default  reduce using rule 82 (DOtOpen)


State 229

   28 Block: StartBlock RETURN Literal ';' NEWLINE '}' .

    $default  reduce using rule 28 (Block)


State 230

   30 Block: StartBlock BREAK Literal ';' NEWLINE '}' .

    $default  reduce using rule 30 (Block)


State 231

   36 DeclarationStmt: LET MUT ID ':' Type '=' ExpressionStmt .

    $default  reduce using rule 36 (DeclarationStmt)


State 232

   53 LoopStmt: LOOP Block .

    $default  reduce using rule 53 (LoopStmt)


State 233

   52 ForStmt: FOR ID IN ID $@5 StartBlock $@6 . StatementList '}'

    LET        shift, and go to state 30
    NEWLINE    shift, and go to state 31
    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    IF         shift, and go to state 34
    FOR        shift, and go to state 35
    WHILE      shift, and go to state 36
    PRINT      shift, and go to state 37
    PRINTLN    shift, and go to state 38
    ID         shift, and go to state 39
    INT_LIT    shift, and go to state 40
    FLOAT_LIT  shift, and go to state 41
    '('        shift, and go to state 42
    '{'        shift, and go to state 43
    '['        shift, and go to state 44
    '&'        shift, and go to state 45
    '"'        shift, and go to state 46
    '+'        shift, and go to state 47
    '-'        shift, and go to state 48
    '!'        shift, and go to state 49

    StatementList       go to state 236
    Statement           go to state 51
    CallFunction        go to state 52
    Block               go to state 53
    StartBlock          go to state 54
    DeclarationStmt     go to state 55
    AssignmentStmt      go to state 56
    IFStmt              go to state 57
    IFOpen              go to state 58
    PrintStmt           go to state 59
    WhileStmt           go to state 60
    ForStmt             go to state 61
    ExpressionStmt      go to state 62
    LogicalORExpr       go to state 63
    LogicalANDExpr      go to state 64
    ComparisonExpr      go to state 65
    AdditionExpr        go to state 66
    MultiplicationExpr  go to state 67
    UnaryExpr           go to state 68
    ArrayExpr           go to state 69
    Operand             go to state 70
    Literal             go to state 71
    unary_op            go to state 72


State 234

   78 DotExpr: DOTDOT $@8 Literal .

    $default  reduce using rule 78 (DotExpr)


State 235

   81 DotExpr: DOtOpen $@9 Literal .

    $default  reduce using rule 81 (DotExpr)


State 236

   52 ForStmt: FOR ID IN ID $@5 StartBlock $@6 StatementList . '}'

    '}'  shift, and go to state 237


State 237

   52 ForStmt: FOR ID IN ID $@5 StartBlock $@6 StatementList '}' .

    $default  reduce using rule 52 (ForStmt)
